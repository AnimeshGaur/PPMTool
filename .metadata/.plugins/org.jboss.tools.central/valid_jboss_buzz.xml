<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Jakarta EE 8: The new era of Java EE explained</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9UgCRCSo_2M/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jakarta ee" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><author><name>rhsilva</name></author><id>searchisko:content:id:jbossorg_blog-jakarta_ee_8_the_new_era_of_java_ee_explained</id><updated>2019-09-12T07:01:28Z</updated><published>2019-09-12T07:01:28Z</published><content type="html">&lt;p&gt;Java EE is a fantastic project. However, it was created in 1999, under the name of J2EE, and is 20 years old, which means it also faces challenges in keeping pace with enterprise demands.&lt;/p&gt; &lt;p&gt;Now, &lt;a href="https://developers.redhat.com/videos/youtube/f2EwhTUmeOI/"&gt;Java EE has a new home and a new brand&lt;/a&gt;. The project was migrated from Oracle to the &lt;a href="https://www.eclipse.org/org/"&gt;Eclipse Foundation&lt;/a&gt;, and it is called Jakarta EE, under the Eclipse Enterprise for Java (EE4J) project. The Eclipse Foundation released &lt;a href="https://jakarta.ee/release/"&gt;Jakarta EE 8&lt;/a&gt; on September 10, and in this article, we’ll look at what that means for enterprise Java.&lt;span id="more-627457"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Java EE was a very strong project that was widely used in many kinds of enterprise Java applications and many big frameworks, such as &lt;a href="https://spring.io/"&gt;Spring&lt;/a&gt; and &lt;a href="https://struts.apache.org/"&gt;Struts&lt;/a&gt;. Developers may have questioned its features and evolving processes, but looking at its high usage and time in the market, its success is undeniable. Nonetheless, the enterprise world doesn’t stop, and new challenges emerge all the time. The speed of change has increased, with new technologies such as cloud computing being developed to provide better solutions, and Java EE needed to keep pace as well.&lt;/p&gt; &lt;h2&gt;Jakarta EE goals&lt;/h2&gt; &lt;p&gt;The Java ecosystem has a new focus on cloud computing, and Jakarta EE is key to that approach. Jakarta EE&amp;#8217;s goal is to accelerate business application development for cloud computing (cloud-native applications), working with specifications developed by many vendors. This project is based on Java EE 8, and its specifications, Technology Compatibility Kits (TCKs), and Reference Implementations (RI) were all migrated from Oracle to the Eclipse Foundation.&lt;/p&gt; &lt;p&gt;To evolve these specifications for cloud computing, however, we cannot work with the same processes used on Java EE, because they are too slow for current enterprise challenges. Thus, the Eclipse Foundation&amp;#8217;s first action was to change the process to evolve Jakarta EE.&lt;/p&gt; &lt;p&gt;The Jakarta EE 8 has the same set of specifications from Java EE 8 with no changes in its features. The only change is the new process to evolve these specifications. With this, Jakarta EE 8 is a milestone in Java enterprise history, as it inserts these specifications in a new process to boost the specifications to a cloud-native application approach.&lt;/p&gt; &lt;h2&gt;Jakarta EE specification process&lt;/h2&gt; &lt;p&gt;The &lt;a href="https://jakarta.ee/about/jesp/"&gt;Jakarta EE Specification Process (JESP)&lt;/a&gt; is the new process will be used by &lt;a href="https://jakarta.ee/about/"&gt;Jakarta EE Working Group&lt;/a&gt; to evolve Jakarta EE. The JESP is replacing the &lt;a href="https://www.jcp.org/en/home/index"&gt;JCP process&lt;/a&gt; used previously for Java EE.&lt;/p&gt; &lt;p&gt;The JESP is based on the Eclipse Foundation Specification Process (EFSP) with some changes, which are covered on the &lt;a href="https://jakarta.ee/about/jesp/"&gt;project page&lt;/a&gt;. Here are the changes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;Any modification to or revision of this Jakarta EE Specification Process, including the adoption of a new version of the EFSP, must be approved by a Super-majority of the Specification Committee, including a Super-majority of the Strategic Members of the Jakarta EE Working Group, in addition to any other ballot requirements set forth in the EFSP.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;All specification committee approval ballot periods will have the minimum duration as outlined below (notwithstanding the exception process defined by the EFSP, these periods may not be shortened)&lt;/em&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;Creation Review: 7 calendar days;&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;Plan Review: 7 calendar days;&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;Progress Review: 14 calendar days;&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;Release Review: 14 calendar days;&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;Service Release Review: 14 calendar days; and&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;JESP Update: 7 calendar days.&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;em&gt;A ballot will be declared invalid and concluded immediately in the event that the Specification Team withdraws from the corresponding review.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;Specification Projects must engage in at least one Progress or Release Review per year while in active development&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The goal of JESP is to be as lightweight as possible, with a design that is closer to open source development and that keeps code-first development in mind. With this, the JESP promotes a new culture focusing on experimentation to evolve these specifications based on knowledge gained through that experimentation.&lt;/p&gt; &lt;h2&gt;Jakarta EE 9&lt;/h2&gt; &lt;p&gt;Jakarta EE 8 is focused on updating its process to evolve, and the first updates in features will come in &lt;a href="https://www.eclipse.org/community/eclipse_newsletter/2019/february/Jakarta_EE_9.php"&gt;Jakarta EE 9&lt;/a&gt;. The main update expected in Jakarta EE 9 is the birth of the Jakarta NoSQL specification.&lt;/p&gt; &lt;p&gt;&lt;a href="https://projects.eclipse.org/proposals/jakarta-nosql"&gt;Jakarta NoSQL&lt;/a&gt; is a specification aimed at easing integration between Java applications and NoSQL databases, promoting a standard solution to connect them with a high level of abstraction. This feature is fantastic. It&amp;#8217;s also a big step in getting the Java platform closer to a cloud-native approach, because NoSQL databases are widely used in cloud environments and improvement is expected. The Jakarta NoSQL is based on &lt;a href="http://www.jnosql.org/"&gt;Eclipse JNoSQL&lt;/a&gt;, which will be its reference implementation.&lt;/p&gt; &lt;p&gt;Another update expected in Jakarta EE involves namespace. Basically, Oracle gave the Java EE project to the Eclipse Foundation, but Oracle still holds the trademark. This means the Eclipse Foundation cannot use Java or &lt;code&gt;javax&lt;/code&gt; in the project name or namespace for new features of Jakarta EE. Thus, the community is discussing transitioning to the &lt;code&gt;jakarta.*&lt;/code&gt; namespace. You can read the discussion thread &lt;a href="https://www.eclipse.org/lists/jakartaee-platform-dev/msg00029.html"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Jakarta EE 8 marks a new era in the Java ecosystem; it gets the important Java EE project working under an open source process and paves the way for needed improvements. Although this Jakarta EE version comes without feature updates, it opens the gate to new features to come in the future. So, we’ll see many solutions based on specifications for cloud development in the next versions of Jakarta EE.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#38;linkname=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#38;linkname=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#38;linkname=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#38;linkname=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#38;linkname=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#38;linkname=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#38;linkname=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fjakarta-ee-8-the-new-era-of-java-ee-explained%2F&amp;#038;title=Jakarta%20EE%208%3A%20The%20new%20era%20of%20Java%20EE%20explained" data-a2a-url="https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/" data-a2a-title="Jakarta EE 8: The new era of Java EE explained"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/"&gt;Jakarta EE 8: The new era of Java EE explained&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9UgCRCSo_2M" height="1" width="1" alt=""/&gt;</content><summary>Java EE is a fantastic project. However, it was created in 1999, under the name of J2EE, and is 20 years old, which means it also faces challenges in keeping pace with enterprise demands. Now, Java EE has a new home and a new brand. The project was migrated from Oracle to the Eclipse Foundation, and it is called Jakarta EE, under the Eclipse Enterprise for Java (EE4J) project. The Eclipse Foundati...</summary><dc:creator>rhsilva</dc:creator><dc:date>2019-09-12T07:01:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/</feedburner:origLink></entry><entry><title>Develop with Flask and Python 3 in a container on Red Hat Enterprise Linux</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HF_BwIBk3iU/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Python Flask" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="UBI" scheme="searchisko:content:tags" /><category term="Universal Base Images (UBI)" scheme="searchisko:content:tags" /><author><name>Rob Terzi</name></author><id>searchisko:content:id:jbossorg_blog-develop_with_flask_and_python_3_in_a_container_on_red_hat_enterprise_linux</id><updated>2019-09-12T07:00:28Z</updated><published>2019-09-12T07:00:28Z</published><content type="html">&lt;p&gt;In my previous article, &lt;a href="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/"&gt;Run Red Hat Enterprise Linux 8 in a container on RHEL 7&lt;/a&gt;, I showed how to start developing with the latest versions of languages, databases, and web servers available with Red Hat Enterprise Linux 8 even if you are still running RHEL 7. In this article, I’ll build on that base to show how to get started with the Flask microframework using the current RHEL 8 application stream version of Python 3.&lt;/p&gt; &lt;p&gt;From my perspective, using Red Hat Enterprise Linux 8 application streams in containers is preferable to using software collections on RHEL 7. While you need to get comfortable with containers, all of the software installs in the locations you’d expect. There is no need to use &lt;code&gt;scl&lt;/code&gt; commands to manage the selected software versions. Instead, each container gets an isolated user space. You don’t have to worry about conflicting versions.&lt;span id="more-624247"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this article, you’ll create a Red Hat Enterprise Linux 8 Django container with Buildah and run it with Podman. The code will be stored on your local machine and mapped into the container when it runs. You’ll be able to edit the code on your local machine as you would any other application. Since it is mapped via a volume mount, the changes you make to the code will be immediately visible from the container, which is convenient for dynamic languages that don’t need to be compiled. While this approach isn’t the way to do things for production, you get the same &lt;a href="https://mitchdenny.com/the-inner-loop/" target="_blank" rel="noopener noreferrer"&gt;development inner loop&lt;/a&gt; as you’d have when developing locally without containers. The article also shows how to use Buildah to build a production image with your completed application.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Additionally, you’ll set up the Red Hat Enterprise Linux 8 PostgreSQL application stream in a container that is managed by &lt;code&gt;systemd&lt;/code&gt;. You can use &lt;code&gt;systemctl&lt;/code&gt; to start and stop the container just as you would for a non-container installation.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Install Podman and Buildah on Red Hat Enterprise Linux 7&lt;/h2&gt; &lt;p&gt;First, we need to install Podman, which is in the &lt;code&gt;extras&lt;/code&gt; repo on Red Hat Enterprise Linux 7. The &lt;code&gt;extras&lt;/code&gt; repo isn’t enabled by default. Developers should also enable the &lt;code&gt;rhscl&lt;/code&gt; (&lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt;), &lt;code&gt;devtools&lt;/code&gt;, and &lt;code&gt;optional&lt;/code&gt; repos:&lt;/p&gt; &lt;pre&gt;$ sudo subscription-manager repos --enable rhel-7-server-extras-rpms \ --enable rhel-7-server-optional-rpms \ --enable rhel-server-rhscl-7-rpms \ --enable rhel-7-server-devtools-rpms&lt;/pre&gt; &lt;p&gt;Now install Podman and Buildah. If &lt;code&gt;sudo&lt;/code&gt; isn’t set up on your system, see &lt;a href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;How to enable &lt;code&gt;sudo&lt;/code&gt; on Red Hat Enterprise Linux&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;$ sudo yum install podman buildah&lt;/pre&gt; &lt;p&gt;Later, we’ll run containers with &lt;span style="font-weight: 400;"&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/span&gt;. If SELinux is enabled on your system (it is by default), you must turn on the &lt;code&gt;container_manage_cgroup&lt;/code&gt; boolean to run containers with &lt;span style="font-weight: 400;"&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre&gt;$ sudo setsebool -P container_manage_cgroup on&lt;/pre&gt; &lt;p&gt;For more information, see the &lt;a href="https://access.redhat.com/solutions/3387631" target="_blank" rel="noopener noreferrer"&gt;containers running &lt;code&gt;systemd&lt;/code&gt;&lt;/a&gt; solution.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Red Hat ID created when you joined Red Hat Developer gives you access to content on the &lt;a href="https://access.redhat.com" target="_blank" rel="noopener noreferrer"&gt;Red Hat Customer Portal&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Set up a Flask example app&lt;/h2&gt; &lt;p&gt;We need Flask code to run. Let’s use Flaskr, the sample app in the Flask distribution&amp;#8217;s &lt;code&gt;examples/tutorial&lt;/code&gt; directory. Download Flask into a working directory on the host machine and extract the tutorial app:&lt;/p&gt; &lt;pre&gt;$ sudo mkdir /opt/src $ sudo chown $USER:$USER /opt/src $ cd /opt/src $ mkdir flask-app $ curl -L https://github.com/pallets/flask/archive/1.1.1.tar.gz | tar xvzf - $ cp -pr flask-1.1.1/examples/tutorial flask-app&lt;/pre&gt; &lt;p&gt;We’ve now got an example Flask app at &lt;code&gt;/opt/src/flask-app&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Run Python 3.6 and Flask in a Red Hat Enterprise Linux 8 container (manually)&lt;/h2&gt; &lt;p&gt;Now we need Python 3.6 and Flask. We’ll manually set up a container with the dependencies and then run the app to see how it’s done. Let&amp;#8217;s start with the Red Hat Enterprise Linux 8 Universal Base Image (UBI). If you&amp;#8217;re unfamiliar with the RHEL UBIs, see the section &amp;#8220;Red Hat Universal Base Images.&amp;#8221;&lt;/p&gt; &lt;p&gt;Red Hat has a new container registry which uses authentication: &lt;a href="http://registry.redhat.io/" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;registry.redhat.io&lt;/code&gt;&lt;/a&gt;. A Red Hat account isn’t required to use UBI images, but other Red Hat images that aren’t part of UBI can only be obtained through &lt;code&gt;registry.redhat.io&lt;/code&gt;. The Red Hat ID created when you joined Red Hat Developer gives you access to the Red Hat Container Registry, so for simplicity, I use only &lt;code&gt;registry.redhat.io&lt;/code&gt; in this example.&lt;/p&gt; &lt;p&gt;If you aren’t logged in when you try to pull an image, you’ll get a verbose error message:&lt;/p&gt; &lt;pre&gt;...unable to retrieve auth token: invalid username/password.&lt;/pre&gt; &lt;p&gt;Log in with your Red Hat username and password:&lt;/p&gt; &lt;pre&gt;$ sudo podman login registry.redhat.io&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Podman was designed to run without root. However, the support for this feature isn’t there with Red Hat Enterprise Linux 7.6. For more information, see Scott McCarty’s, &lt;a href="https://www.redhat.com/en/blog/preview-running-containers-without-root-rhel-76" target="_blank" rel="noopener noreferrer"&gt;A preview of running containers without root in RHEL 7.6&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Now run the container, making our source directory &lt;code&gt;/opt/src&lt;/code&gt; available inside the container and exposing port 5000 so you can connect to the Flask app with a browser on the host system:&lt;/p&gt; &lt;pre&gt;$ sudo podman run -v /opt/src:/opt/src:Z -it -p 5000:5000 registry.redhat.io/ubi8/ubi /bin/bash&lt;/pre&gt; &lt;p&gt;The previous command also invoked an interactive shell for the Red Hat Enterprise Linux 8 based UBI container. From inside the container, see what application streams are available with RHEL 8:&lt;/p&gt; &lt;pre&gt;# yum module list&lt;/pre&gt; &lt;p&gt;You might notice an extra group of application streams labeled Universal Base Image. See the UBI section for more information about Red Hat Universal Base Images.&lt;/p&gt; &lt;p&gt;Next, install Python 3.6:&lt;/p&gt; &lt;pre&gt;# yum -y module install python36&lt;/pre&gt; &lt;p&gt;Python 3.6 is now installed in our container and is in our path as &lt;code&gt;python3&lt;/code&gt;, not &lt;code&gt;python&lt;/code&gt;. If you want to know why see Petr Viktorin’s article, &lt;a href="https://developers.redhat.com/blog/2018/11/14/python-in-rhel-8/"&gt;Python in RHEL 8&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Next, use &lt;code&gt;pip&lt;/code&gt; to install Flask:&lt;/p&gt; &lt;pre&gt;# pip3 install flask&lt;/pre&gt; &lt;p&gt;You’ll get a warning about running &lt;code&gt;pip&lt;/code&gt; as root. Running &lt;code&gt;pip&lt;/code&gt; as root on a real system is generally a bad idea. However, we’re running in a dedicated container which is isolated and disposable, so we can do pretty much whatever we want with files in &lt;code&gt;/usr&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let’s check where the Flask command-line interface (CLI) was installed:&lt;/p&gt; &lt;pre&gt;# which flask&lt;/pre&gt; &lt;p&gt;Pip installed it into &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now let’s run the example app inside of the container:&lt;/p&gt; &lt;pre&gt;# cd /opt/src/flask-app # export FLASK_APP=flaskr # export FLASK_ENV=development # flask init-db # flask run --host=0.0.0.0&lt;/pre&gt; &lt;p&gt;Using a browser on the host system, go to &lt;code&gt;http://localhost:5000/&lt;/code&gt; and view the resulting page:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/08/flask-flaskr-screenshot.png"&gt;&lt;img class=" aligncenter size-large wp-image-624277 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/flask-flaskr-screenshot-1024x685.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/flask-flaskr-screenshot-1024x685.png" alt="" width="640" height="428" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/flask-flaskr-screenshot-1024x685.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/flask-flaskr-screenshot-300x201.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/flask-flaskr-screenshot-768x514.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/flask-flaskr-screenshot.png 1200w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now, you’ve got a container configured by hand that runs Flask applications using Red Hat Enterprise Linux 8’s Python 3.6 application stream on your RHEL 7 system. You could treat this container like a &amp;#8220;pet,&amp;#8221; and use &lt;code&gt;podman restart -l&lt;/code&gt; and &lt;code&gt;podman attach -l&lt;/code&gt; when you want to run it again—as long as you don’t delete it. We didn’t name the container, but the &lt;code&gt;-l&lt;/code&gt; conveniently selects the last running container. Alternatively, you’d need to use &lt;code&gt;podman ps -a&lt;/code&gt; to get the ID, or randomly generated name to pass to &lt;code&gt;podman restart&lt;/code&gt; and &lt;code&gt;podman attach&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you restart the container, it is similar to rebooting a system. The installed files are there, but any of the other runtime state-like environment variable settings won&amp;#8217;t persist. The life cycle for containers you’ve seen in most tutorials is &amp;#8220;run then delete&amp;#8221; since containers are designed to be ephemeral. However, knowing how to create and restart containers can be handy when you need to experiment.&lt;/p&gt; &lt;h2&gt;Create a Flask container image with Buildah&lt;/h2&gt; &lt;p&gt;To make things easier, we’ll create a container image that has Flask installed and starts the Flask app anytime the container is run. The container won’t have a copy of the app, we’ll still map the app into the container from the host system. The code will be stored on your local machine where you can edit it as you would any other application source. Because it is mapped via a volume mount, the changes you make to the code will be immediately visible inside the container.&lt;/p&gt; &lt;p&gt;When creating images with Buildah, you can use Dockerfiles or Buildah command lines. For this article, we’ll use the Dockerfile approach because you’ve probably seen it before in other tutorials.&lt;/p&gt; &lt;p&gt;Because we are working with files that are shared between your host system and the container, we’ll run the container using the same numeric user ID (UID) as your regular account. While inside the container, any files are created in the source directory are owned by your user ID on the host system. Find out your UID with the &lt;code&gt;id&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ id&lt;/pre&gt; &lt;p&gt;Make a note of the number after &lt;code&gt;UID=&lt;/code&gt; and &lt;code&gt;GID=&lt;/code&gt; at the start of the line. On my system, my UID and GID are both 1000. In the Dockerfile and other examples here, change the &lt;code&gt;USER&lt;/code&gt; line to match your UID:GID.&lt;/p&gt; &lt;p&gt;In &lt;code&gt;/opt/src/flask-app&lt;/code&gt;, create &lt;code&gt;Dockerfile&lt;/code&gt; with the following contents:&lt;/p&gt; &lt;pre&gt;FROM registry.redhat.io/ubi8/python-36 RUN pip3 install flask # set default flask app and environment ENV FLASK_APP flaskr ENV FLASK_ENV development # This is primarily a reminder that we need access to port 5000 EXPOSE 5000 # Change this to UID that matches your username on the host # Note: RUN commands before this line will execute as root in the container # RUN commands after will execute under this non-privileged UID USER 1000 # Default cmd when container is started # Create the database if it doesn't exist, then run the app # Use --host to make Flask listen on all networks inside the container CMD [ -f ../var/flaskr-instance/flaskr.sqlite ] || flask init-db ; flask run --host=0.0.0.0 &lt;/pre&gt; &lt;p&gt;A note on the Dockerfile: Instead of installing Python 3.6, I used a UBI image from Red Hat that already had Python 3.6 on top of the UBI 8 image. The command that runs when the container starts will create the database if it doesn’t exist, and then run the Flask app.&lt;/p&gt; &lt;p&gt;Next, build the Flask container (don’t forget the trailing &lt;code&gt;.&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;$ sudo buildah bud -t myorg/myflaskapp .&lt;/pre&gt; &lt;p&gt;Now we can run the Flask container containing our app:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it -p 5000:5000 -v /opt/src/flask-app:/opt/app-root/src:Z myorg/myflaskapp&lt;/pre&gt; &lt;p&gt;The Flaskr app should now be running, which you can verify by using a browser on the host system and going to &lt;code&gt;http://localhost:8000/&lt;/code&gt; to view the resulting page.&lt;/p&gt; &lt;p&gt;You can now edit the code in &lt;code&gt;/opt/src/flask-app&lt;/code&gt; like you would any regular source code. When you need to restart Flask, Ctrl+C the container. Note the &lt;code&gt;--rm&lt;/code&gt; in the &lt;code&gt;run&lt;/code&gt; command, which automatically removes the container when it exits.&lt;/p&gt; &lt;p&gt;To start the container again, you will need to use the above &lt;code&gt;podman run&lt;/code&gt; command again, which creates a fresh new container, plus a new database with nothing in it. For many situations, this fresh start is desirable.&lt;/p&gt; &lt;h2&gt;Persist the SQLite database between containers&lt;/h2&gt; &lt;p&gt;The Flaskr example uses a SQLite database, which is stored inside the container. Containers are intended to be ephemeral, so any changes made inside the container will be lost when the container is deleted.&lt;/p&gt; &lt;p&gt;There are several ways you can keep the database (or other files) from containers across runs. As mentioned above, you could try to keep the container around and restart it, instead of recreating it with &lt;code&gt;run&lt;/code&gt; every time. While that practice can be handy for experimenting and debugging, this isn’t a good way to accomplish persistence. Now is a good time to mention if you &lt;em&gt;do&lt;/em&gt; have changed files you’d like to get out of a container that has exited but hasn’t been removed, Podman and Buildah have a handy &lt;code&gt;mount&lt;/code&gt; command that mounts the container on the host system so you can access the files through the filesystem.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are confused about the difference between a container and a container image, see Scott McCarty’s article: &lt;a href="https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/"&gt;A Practical Introduction to Container Terminology&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Instead of trying to keep the container around, a much cleaner solution is to arrange for the database (or other files you’d like to persist) to be stored in the host&amp;#8217;s filesystem. You can do this by adding another volume mount with &lt;code&gt;-v&lt;/code&gt; to the &lt;code&gt;run&lt;/code&gt; command. Here’s the full command, which stores the database with the source code:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it -p 5000:5000 -v /opt/src/flask-app:/opt/app-root/src:Z \ -v /opt/src/flask-app/instance:/opt/app-root/var/flaskr-instance:Z myorg/myflaskapp&lt;/pre&gt; &lt;h2&gt;Run MariaDB in a container&lt;/h2&gt; &lt;p&gt;Another way to deal with persistence is to run a database server in another container. In a previous article, &lt;a href="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/"&gt;Run Red Hat Enterprise Linux 8 in a container on RHEL 7&lt;/a&gt;, I showed how to run MariaDB using the current Red Hat Enterprise Linux 8 application stream on a RHEL 7 system. The MariaDB container is managed by &lt;code&gt;systemd&lt;/code&gt;, so you can use &lt;code&gt;systemctl&lt;/code&gt; commands just like you would for a non-containerized version.&lt;/p&gt; &lt;p&gt;For the sake of brevity, I won’t replicate the instructions to get MariaDB running in this article, just follow the previous article&amp;#8217;s MariaDB section to get that database running.&lt;/p&gt; &lt;p&gt;The one thing you’ll need to know is how to make your Flask container connect to the database container. By default, containers are designed to run with an isolated virtual network. Steps need to be taken to network containers together. I think the easiest approach for the scenario in this article—where you just want to run a few containers—is to arrange for the containers to share the host’s network.&lt;/p&gt; &lt;p&gt;To use the host&amp;#8217;s network, add &lt;code&gt;--net host&lt;/code&gt; to the &lt;code&gt;run&lt;/code&gt; command for both your Flask and database containers. If you are using the host’s network, you won’t need to select which ports to expose. So, the full &lt;code&gt;run&lt;/code&gt; command for the Flask container is:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it --net host -v /opt/src/flask-app:/opt/app-root/src:Z \ -v /opt/src/flask-app/instance:/opt/app-root/var/flaskr-instance:Z myorg/myflaskapp&lt;/pre&gt; &lt;p&gt;While using the host’s network is quick and easy for development, you’d run into port conflicts if you had a number of MariaDB containers that all wanted to use port 3306. One way to improve this setup is to use Podman’s pod capabilities to put the app and database containers in the same pod, where they share namespaces. See Brent Baude’s article, &lt;a href="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/"&gt;Podman: Managing pods and containers in a local container runtime&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Use Buildah to create an image with your Flask app&lt;/h2&gt; &lt;p&gt;After you’ve developed your app, you can use Buildah to create a distributable container image with your Flask app. We’ll use Buildah command lines instead of a Dockerfile. This approach is much more flexible for complex builds and automation: You can use shell scripts or whatever other tools you use for your build environment.&lt;/p&gt; &lt;p&gt;In &lt;code&gt;/opt/src/flask-app&lt;/code&gt;, create &lt;code&gt;app-image-build.sh&lt;/code&gt; with the following contents:&lt;/p&gt; &lt;pre&gt;#!/bin/sh # Build our Flask app and all the dependencies into a container image # Note: OOTB on RHEL 7.6 this needs to be run as root. MYIMAGE=myorg/myflaskapp FLASK_APP=flaskr FLASK_ENV=development USERID=1000 IMAGEID=$(buildah from ubi8/python-36) buildah run $IMAGEID pip3 install flask buildah config --env FLASK_APP=$FLASK_APP --env FLASK_ENV=$FLASK_ENV $IMAGEID # any build steps above this line run as root inside the container # any steps after run as $USERID buildah config --user $USERID:$USERID $IMAGEID buildah copy $IMAGEID . /opt/app-root/src buildah config --cmd '/bin/sh run-app.sh' $IMAGEID buildah commit $IMAGEID $MYIMAGE &lt;/pre&gt; &lt;p&gt;This image calls a start script to launch our application. Next, create &lt;code&gt;run-app.sh&lt;/code&gt; in the same directory, with the following contents:&lt;/p&gt; &lt;pre&gt;#!/bin/sh APP_DB_PATH=${APP_DB_PATH:-../var/instance/flaskr.sqlite} if [ ! -f ${APP_DB_PATH} ]; then echo Creating database flask init-db fi echo Running app $FLASK_APP flask run --host=0.0.0.0 &lt;/pre&gt; &lt;p&gt;Now, build the image:&lt;/p&gt; &lt;pre&gt;$ sudo app-image-build.sh&lt;/pre&gt; &lt;p&gt;Run and test the new image:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it --net host -v /opt/src/flask-app/instance:/opt/app-root/var/flaskr-instance:Z myorg/myflaskapp&lt;/pre&gt; &lt;p&gt;When you are ready, you can distribute your application by pushing it to a container registry like Red Hat’s &lt;a href="https://quay.io/" target="_blank" rel="noopener noreferrer"&gt;Quay.io&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Next steps&lt;/h2&gt; &lt;p&gt;By now, you should see that it is easy to get the software components you need running in containers so you can focus on development. It shouldn’t feel very different from developing without containers.&lt;/p&gt; &lt;p&gt;The Flask container you built isn’t tied to a specific app. You could reuse that container for other Flask apps by overriding the environment variables: add &lt;code&gt;-e FLASK_APP mynewapp&lt;/code&gt; to the &lt;code&gt;podman run&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;You could also build on the Dockerfile above to install more Python modules for your app into your container image, or customize the way the app starts.&lt;/p&gt; &lt;p&gt;Check out what other UBI 8 images are available in the Red Hat Container Catalog. If the language, runtime, or server aren’t available as a UBI image, you can build your own beginning with the &lt;code&gt;ubi8&lt;/code&gt; base image. Then, you can add the application streams and other rpms you need with &lt;code&gt;yum&lt;/code&gt; commands in a Dockerfile, or with &lt;code&gt;buildah run&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Red Hat Universal Base Images&lt;/h2&gt; &lt;p&gt;I’ve mentioned Universal Base Images (UBIs) a number of times in this article without explaining them. Red Hat provides these UBIs to use as a base for your container images. From Mike Guerette’s article, &lt;a href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&amp;#8220;Red Hat Universal Base Images (UBI) are OCI-compliant container base operating system images with complementary runtime languages and packages that are freely redistributable. Like previous RHEL base images, they are built from portions of Red Hat Enterprise Linux. UBI images can be obtained from the Red Hat Container Catalog and be built and deployed anywhere.&lt;/p&gt; &lt;p&gt;&amp;#8220;And, you don’t need to be a Red Hat customer to use or redistribute them. Really.&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;With the release of Red Hat Enterprise Linux 8 in May, Red Hat &lt;a href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;announced&lt;/a&gt; that all RHEL 8 base images would be available under the new &lt;a href="https://www.redhat.com/licenses/EULA_Red_Hat_Universal_Base_Image_English_20190422.pdf" target="_blank" rel="noopener noreferrer"&gt;Universal Base Image End User License Agreement (EULA)&lt;/a&gt;. This fact means that you can build and redistribute container images that use Red Hat’s UBI images as your base, instead of switching to images based on other distributions, like Alpine. In other words, you won’t have to switch from using &lt;code&gt;yum&lt;/code&gt; to using &lt;code&gt;apt-get&lt;/code&gt; when building containers.&lt;/p&gt; &lt;p&gt;There are three base images for Red Hat Enterprise Linux 8. The standard one is called &lt;code&gt;ubi&lt;/code&gt;, or more precisely, &lt;code&gt;ubi8/ubi&lt;/code&gt;. This is the image used above which you will probably use most often. The other two are minimal containers. They contain little supporting software for when image size is a high priority and a multi-service image that allows you to run multiple processes inside the container managed by &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are also UBI images for Red Hat Enterprise Linux 7 under &lt;code&gt;ubi7&lt;/code&gt; if you want to build and distribute containers running on a RHEL 7 image. For this article, we’ll only use the &lt;code&gt;ubi8&lt;/code&gt; images.&lt;/p&gt; &lt;p&gt;If you are just starting out with containers, you don&amp;#8217;t need to delve into UBI details right now. Just use the &lt;code&gt;ubi8&lt;/code&gt; images to build containers based off Red Hat Enterprise Linux 8. However, you will want to understand UBI details when you start distributing container images or have questions about support. For more information, see the references at the end of this article.&lt;/p&gt; &lt;h3&gt;More information&lt;/h3&gt; &lt;p&gt;Related articles:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/"&gt;Run Red Hat Enterprise Linux 8 in a container on RHEL 7&lt;/a&gt; (covers PHP 7.2, MariaDB, and WordPress running in containers)&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.redhat.com/en/blog/setting-django-application-rhel-8-beta" target="_blank" rel="noopener noreferrer"&gt;Setting up a Django application on RHEL 8 Beta&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Cheat sheets:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/04/25/podman-basics-cheat-sheet/"&gt;&lt;span style="font-weight: 400;"&gt;Podman Basics Cheat Sheet&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-developer-cheat-sheet/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Enterprise Linux 8 Cheat Sheet&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Podman and Buildah:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/"&gt;&lt;span style="font-weight: 400;"&gt;Podman and Buildah for Docker users&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/29/managing-containerized-system-services-with-podman/"&gt;&lt;span style="font-weight: 400;"&gt;Managing containerized system services with Podman&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/"&gt;&lt;span style="font-weight: 400;"&gt;Podman: Managing pods and containers in a local container runtime&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://opensource.com/article/18/6/getting-started-buildah" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Getting started with Buildah&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Building, Running, and Managing containers &amp;#8211; RHEL 8 Documentation&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html-single/getting_started_with_containers/index" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Getting Started with Containers &amp;#8211; RHEL 7 Documentation&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;UBI: &lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhel/ubi/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Universal Base Images (UBI)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;&lt;span style="font-weight: 400;"&gt;UBI FAQ&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F12%2Fdevelop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux%2F&amp;#038;title=Develop%20with%20Flask%20and%20Python%203%20in%20a%20container%20on%20Red%20Hat%20Enterprise%20Linux" data-a2a-url="https://developers.redhat.com/blog/2019/09/12/develop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux/" data-a2a-title="Develop with Flask and Python 3 in a container on Red Hat Enterprise Linux"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/12/develop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux/"&gt;Develop with Flask and Python 3 in a container on Red Hat Enterprise Linux&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HF_BwIBk3iU" height="1" width="1" alt=""/&gt;</content><summary>In my previous article, Run Red Hat Enterprise Linux 8 in a container on RHEL 7, I showed how to start developing with the latest versions of languages, databases, and web servers available with Red Hat Enterprise Linux 8 even if you are still running RHEL 7. In this article, I’ll build on that base to show how to get started with the Flask microframework using the current RHEL 8 application strea...</summary><dc:creator>Rob Terzi</dc:creator><dc:date>2019-09-12T07:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/12/develop-with-flask-and-python-3-in-a-container-on-red-hat-enterprise-linux/</feedburner:origLink></entry><entry><title>Develop with Django 2 and Python 3 in a container with Red Hat Enterprise Linux</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/J9RzkIJAMoQ/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="django" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><category term="Universal Base Images (UBI)" scheme="searchisko:content:tags" /><author><name>Rob Terzi</name></author><id>searchisko:content:id:jbossorg_blog-develop_with_django_2_and_python_3_in_a_container_with_red_hat_enterprise_linux</id><updated>2019-09-11T07:01:06Z</updated><published>2019-09-11T07:01:06Z</published><content type="html">&lt;p&gt;In my previous article, &lt;a href="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/"&gt;Run Red Hat Enterprise Linux 8 in a container on RHEL 7&lt;/a&gt;, I showed how to start developing with the latest versions of languages, databases, and web servers available with Red Hat Enterprise Linux 8 even if you are still running RHEL 7. In this article, I’ll build on that base to show how to get started with Django 2 using the current RHEL 8 application stream versions of Python 3 and PostgreSQL 10.&lt;span id="more-624177"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;From my perspective, using Red Hat Enterprise Linux 8 application streams in containers is preferable to using software collections on RHEL 7. While you need to get comfortable with containers, all of the software installs in the locations you’d expect. There is no need to use &lt;code&gt;scl&lt;/code&gt; commands to manage the selected software version. Instead, each container gets an isolated user space. You don’t have to worry about conflicting versions.&lt;/p&gt; &lt;p&gt;In this article, I show you how to create a Red Hat Enterprise Linux 8 Django container with Buildah, and run it with Podman. The code is stored on your local machine and mapped into the container when it runs. You can edit the code on your local machine as you would any other application. Because it is mapped via a volume mount, the changes you make to the code are immediately visible from the container, which is convenient for dynamic languages that don’t need to be compiled.&lt;/p&gt; &lt;p&gt;While this method isn’t the way you’d want to do things for production, you get essentially the same &lt;a href="https://mitchdenny.com/the-inner-loop/" target="_blank" rel="noopener noreferrer"&gt;development inner loop&lt;/a&gt; you’d have developing locally without containers. The article also shows how you can use Buildah to build an image with your completed application that you could use for production. Additionally, you’ll set up the RHEL 8 PostgreSQL application stream in a container that is managed by &lt;code&gt;systemd&lt;/code&gt;. You’ll be able to use &lt;code&gt;systemctl&lt;/code&gt; to start and stop the container just as you would for a non-container installation.&lt;/p&gt; &lt;h2&gt;Prepping Red Hat Enterprise Linux 7&lt;/h2&gt; &lt;p&gt;Before we create our Red Hat Enterprise Linux 8 container on our RHEL 7 system, we need to ensure that we have the necessary software installed, and then either select an example Django app or create our own. Let&amp;#8217;s walk through this preparation phase.&lt;/p&gt; &lt;h3&gt;Installing Podman and Buildah on RHEL 7&lt;/h3&gt; &lt;p&gt;First, we need to install Podman, which is in the Red Hat Enterprise Linux 7 &lt;code&gt;extras&lt;/code&gt; repo. The &lt;code&gt;extras&lt;/code&gt; repo isn’t enabled by default. It is recommended that developers also enable the &lt;code&gt;rhscl&lt;/code&gt; (&lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt;), &lt;code&gt;devtools&lt;/code&gt;, and &lt;code&gt;optional&lt;/code&gt; repos. To enable all of these at once:&lt;/p&gt; &lt;pre&gt;$ sudo subscription-manager repos --enable rhel-7-server-extras-rpms \ --enable rhel-7-server-optional-rpms \ --enable rhel-server-rhscl-7-rpms \ --enable rhel-7-server-devtools-rpms&lt;/pre&gt; &lt;p&gt;Now install Podman and Buildah:&lt;/p&gt; &lt;pre&gt;$ sudo yum install podman buildah&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If &lt;code&gt;sudo&lt;/code&gt; isn’t set up on your system, see &lt;a href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;How to enable sudo on Red Hat Enterprise Linux&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Later, we’ll run containers with &lt;code&gt;systemd&lt;/code&gt;. If SELinux is enabled on your system (it is by default), you must turn on the &lt;code&gt;container_manage_cgroup&lt;/code&gt; boolean to run containers with &lt;code&gt;systemd&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ sudo setsebool -P container_manage_cgroup on&lt;/pre&gt; &lt;p&gt;For more information, see the &lt;a href="https://access.redhat.com/solutions/3387631" target="_blank" rel="noopener noreferrer"&gt;container running systemd&lt;/a&gt; solution.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Red Hat ID that was created when you joined Red Hat Developer gives you access to content on the &lt;a href="https://access.redhat.com" target="_blank" rel="noopener noreferrer"&gt;Red Hat Customer Portal&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Setting up a Django example app&lt;/h3&gt; &lt;p&gt;We need some Django code to run. We’ll use the Polls app from the &lt;a href="https://docs.djangoproject.com/en/2.2/intro/tutorial01/" target="_blank" rel="noopener noreferrer"&gt;Writing your first Django app&lt;/a&gt; tutorial. Rather than recreating all of the files manually, we’ll pull the code from GitHub. The Django project doesn’t make the example app available for an easy download, but a few users have created repos containing it. I picked &lt;a href="https://github.com/monim67/django-polls" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;monim67/django-polls&lt;/code&gt;&lt;/a&gt; because the code for each chapter of the tutorial is tagged in the repo.&lt;/p&gt; &lt;p&gt;Run these commands to create a source directory:&lt;/p&gt; &lt;pre&gt;$ sudo mkdir /opt/src $ sudo chown $USER:$USER /opt/src $ cd /opt/src $ git clone https://github.com/monim67/django-polls.git $ cd polls-app $ git tag # see what tags are available $ git checkout d2.1t7 # optionally checkout the code for the last chapter&lt;/pre&gt; &lt;p&gt;We now have an example Django app at &lt;code&gt;/opt/src/django-polls&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Creating your Red Hat Enterprise Linux 8 container image&lt;/h2&gt; &lt;p&gt;Now that our Red Hat Enterprise Linux 7 prep is complete, we can create our custom RHEL 8 container image. Using an existing Red Hat Universal Base Image (UBI) speeds up this process.&lt;/p&gt; &lt;h3&gt;Understanding Red Hat Universal Base Images&lt;/h3&gt; &lt;p&gt;Universal Base Images are universal base images from Red Hat that you can use as a base for your container images. From Mike Guerette’s article, &amp;#8220;&lt;a href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/a&gt;:&amp;#8221;&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;“Red Hat Universal Base Images (UBI) are OCI-compliant container base operating system images with complementary runtime languages and packages that are freely redistributable. Like previous RHEL base images, they are built from portions of Red Hat Enterprise Linux. UBI images can be obtained from the Red Hat Container Catalog and be built and deployed anywhere.&lt;/p&gt; &lt;p&gt;&amp;#8220;And, you don’t need to be a Red Hat customer to use or redistribute them. Really.”&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;With the release of Red Hat Enterprise Linux 8 in May, Red Hat &lt;a href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image" target="_blank" rel="noopener noreferrer"&gt;announced&lt;/a&gt; that all RHEL 8 base images would be available under the new &lt;a href="https://www.redhat.com/licenses/EULA_Red_Hat_Universal_Base_Image_English_20190422.pdf" target="_blank" rel="noopener noreferrer"&gt;Universal Base Image End User License Agreement (EULA)&lt;/a&gt;. This fact means that you can build and redistribute container images that use Red Hat’s UBI images as your base, instead of having to switch to images based on other distributions, like Alpine. In other words, you won’t have to switch from using &lt;code&gt;yum&lt;/code&gt; to using &lt;code&gt;apt-get&lt;/code&gt; when building containers.&lt;/p&gt; &lt;p&gt;There are three base images for RHEL 8. The standard one is called &lt;code&gt;ubi&lt;/code&gt;, or more precisely, &lt;code&gt;ubi8/ubi&lt;/code&gt;. This is the image used above and is the one you might use most often. The other two are minimal containers. They have very little supporting software in them for when image size is a high priority and a multi-service image that allows you to run multiple processes inside the container managed by &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are also UBI images for RHEL 7 under &lt;code&gt;ubi7&lt;/code&gt; if you want to build and distribute containers running on an RHEL 7 image. For this article, we only use the &lt;code&gt;ubi8&lt;/code&gt; images.&lt;/p&gt; &lt;p&gt;If you are just starting out with containers, you might not need to delve into UBI details right now. Just use the &lt;code&gt;ubi8&lt;/code&gt; images to build containers based off of RHEL 8. However, you need to understand UBI details when you start distributing container images or have questions about support. For more information, see the references at the end of this article.&lt;/p&gt; &lt;h3&gt;Adding Python 3.6 and Django to a RHEL 8 container (manually)&lt;/h3&gt; &lt;p&gt;Now we need Python 3.6 and Django. We’ll set up a container with the dependencies manually installed and then run the app to see how it’s done.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s use the Red Hat Enterprise Linux 8 &lt;a href="https://developers.redhat.com/products/rhel/ubi/"&gt;Universal Base Image (UBI)&lt;/a&gt;. But first, log into the new Red Hat Container Registry, which supports authentication, &lt;a href="https://registry.redhat.io" target="_blank" rel="noopener noreferrer"&gt;registry.redhat.io&lt;/a&gt;. If you don’t log in when you try to pull an image, you’ll get a verbose error message containing the message:&lt;/p&gt; &lt;pre&gt;...unable to retrieve auth token: invalid username/password&lt;/pre&gt; &lt;p&gt;Use your Red Hat Developer username and password to log into the registry:&lt;/p&gt; &lt;pre&gt;$ sudo podman login registry.redhat.io&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Podman was designed so that it can run without root. However, the support for that feature isn’t there with RHEL 7.6. For more information, see Scott McCarty’s &lt;a href="https://www.redhat.com/en/blog/preview-running-containers-without-root-rhel-76" target="_blank" rel="noopener noreferrer"&gt;A preview of running containers without root in RHEL 7.6&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Now, run the container and make the source directory (&lt;code&gt;/opt/src&lt;/code&gt;) available inside the container, then expose port 8000 so you can connect to the Django app with a browser on the host system:&lt;/p&gt; &lt;pre&gt;$ sudo podman run -it -v /opt/src:/opt/src:Z -p 8000:8000 registry.redhat.io/ubi8/ubi /bin/bash&lt;/pre&gt; &lt;p&gt;Inside the container, see what application streams are available with Red Hat Enterprise Linux 8:&lt;/p&gt; &lt;pre&gt;# yum module list&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You might notice an extra group of application streams labeled &amp;#8220;Universal Base Image.&amp;#8221;&lt;/p&gt; &lt;p&gt;Next, install Python 3.6:&lt;/p&gt; &lt;pre&gt;# yum -y module install python36&lt;/pre&gt; &lt;p&gt;Python 3.6 is now installed in our container and is in our path as &lt;code&gt;python3&lt;/code&gt;, not &lt;code&gt;python&lt;/code&gt;. If you want to know why, see Petr Viktorin’s article, &lt;a href="https://developers.redhat.com/blog/2018/11/14/python-in-rhel-8/"&gt;Python in RHEL 8&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Next use &lt;code&gt;pip&lt;/code&gt; to install Django:&lt;/p&gt; &lt;pre&gt;# pip3 install django&lt;/pre&gt; &lt;p&gt;You’ll get a warning about running &lt;code&gt;pip&lt;/code&gt; as root. Running &lt;code&gt;pip&lt;/code&gt; as root on a real system is generally a bad idea. However, we’re running in a dedicated container that is isolated and disposable, so we can do whatever we want with files in&lt;code&gt;/usr&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let’s check where the &lt;code&gt;django-admin&lt;/code&gt; command-line interface (CLI) got installed:&lt;/p&gt; &lt;pre&gt;# which django-admin&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;pip&lt;/code&gt; command installed the CLI into &lt;code&gt;/usr/local/bin&lt;/code&gt;. Now, let’s run the example app inside the container:&lt;/p&gt; &lt;pre&gt;# cd /opt/src/django-polls # python3 manage.py runserver 0:8000&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you run the app, you might see an error message about &lt;em&gt;unapplied migrations&lt;/em&gt;. You can ignore this message if you used the above repo, which included a pre-populated SQLite database. If you used a different source or need to create the database, see &amp;#8220;Running DB migrations and Django admin inside the container&amp;#8221; below.&lt;/p&gt; &lt;p&gt;Using a browser on the host system, go to &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt;. The username and password for the SQLite database that came from the GitHub repo is &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt;. After logging in, you should get a screen like this:&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;&lt;img class=" aligncenter wp-image-627267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Terzi-Django-1024x411.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Terzi-Django-1024x411.png" alt="" width="640" height="257" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Terzi-Django-1024x411.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Terzi-Django-300x120.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Terzi-Django-768x308.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;Now, you’ve got a container, configured by hand, that will run Django using Red Hat Enterprise Linux 8’s Python 3.6 application stream on your RHEL 7 system. You could treat this container like a pet, and use &lt;code&gt;podman restart -l &lt;/code&gt;and &lt;code&gt;podman attach -l&lt;/code&gt; when you want to run it again, as long as you don’t delete it. We didn’t name the container, but the &lt;code&gt;-l&lt;/code&gt; conveniently selects the last running container. Although this information is handy to know for testing, it’s rarely reproducible.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;An additional problem with this container is that it runs as root in order to be able to install software. Any files created by the container in &lt;code&gt;/opt/src&lt;/code&gt; will be owned by root. &lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Creating a Django container image with Buildah&lt;/h3&gt; &lt;p&gt;To make things easier, we’ll create a container image that has Django installed, and will start the Django app any time the container is created. The container won’t have a copy of the app, we’ll still map it into the container from the host system. The code will be stored on your local machine where you can edit it as you would any other application source. Since it is mapped via a volume mount, the changes you make to the code will be immediately visible inside the container.&lt;/p&gt; &lt;p&gt;When creating images with Buildah, you can use Dockerfiles or Buildah command lines. For this article, we’ll use the Dockerfile approach since other tutorials often use this method.&lt;/p&gt; &lt;p&gt;Since we&amp;#8217;re working with files that are shared between your host system and the container, we’ll run the container using the same numeric user ID (UID) as your regular account. When inside the container, any files created in the source directory will be owned by your host system user ID. Find out your UID with the &lt;code&gt;id&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ id&lt;/pre&gt; &lt;p&gt;Make a note of the number after &lt;code&gt;UID=&lt;/code&gt; and &lt;code&gt;GID=&lt;/code&gt; at the very start of the line. On my system, my UID and GID are both 1000. In the Dockerfile and other examples below, change the &lt;code&gt;USER&lt;/code&gt; line to match your UID:GID.&lt;/p&gt; &lt;p&gt;In &lt;code&gt;/opt/src/django-polls&lt;/code&gt;, create &lt;code&gt;Dockerfile&lt;/code&gt; with the following content:&lt;/p&gt; &lt;pre&gt;FROM registry.redhat.io/ubi8/python-36 RUN pip3 install django gunicorn psycopg2 # This is primarily a reminder that we need access to port 8000 EXPOSE 8000 # Change this to UID that matches your username on the host # Note: RUN commands before this line will execute as root in the container # RUN commands after will execute under this non-privileged UID USER 1000:1000 # Default cmd when container is started # Default directory was already set by Python container to /opt/app-root/src # Get Django to listen on all interfaces so we can connect from outside the container CMD python3 manage.py runserver 0:8000 &lt;/pre&gt; &lt;p&gt;A few notes on the Dockerfile. Instead of installing Python 3.6, I used a UBI image from Red Hat that already had Python 3.6 on top of the UBI 8 image. During the build, &lt;code&gt;pip&lt;/code&gt; will run inside the container as root because it is above the &lt;code&gt;USER&lt;/code&gt; line that changes to a non-privileged user.&lt;/p&gt; &lt;p&gt;Next, build the Django container:&lt;/p&gt; &lt;pre&gt;$ sudo buildah bud -t myorg/mydjangoapp .&lt;/pre&gt; &lt;p&gt;(Don’t forget the trailing &lt;code&gt;. &lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Now, run the Django container, which should start the Polls app:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it -p 8000:8000 -v /opt/src/django-polls:/opt/app-root/src:Z myorg/mydjangoapp&lt;/pre&gt; &lt;p&gt;The Django polls app should now be running, which you can verify by using a browser on the host system and going to &lt;code&gt;http://localhost:8000/admin&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can now edit the code in &lt;code&gt;/opt/src/django-polls&lt;/code&gt; like you would any regular source code. When you need to restart, CTRL+C the container. Note the &lt;code&gt;--rm&lt;/code&gt; in the &lt;code&gt;run&lt;/code&gt; command, which will automatically remove the container when it exits. To start the container again, use the above &lt;code&gt;podman run&lt;/code&gt; command again, which will create a fresh container.&lt;/p&gt; &lt;h2&gt;Setting up your database&lt;/h2&gt; &lt;p&gt;Now to set up a persistent, full-featured database that won&amp;#8217;t vanish when you shut off the container, and then connect it to Django.&lt;/p&gt; &lt;h3&gt;Running DB migrations and Django admin inside the container&lt;/h3&gt; &lt;p&gt;Since the environment to run Django exists in the container, you’ll need to run any Django admin commands inside it. You can either run a single command or launch a shell inside the container. To apply any DB migrations:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it -p 8000:8000 -v /opt/src/django-polls:/opt/app-root/src:Z myorg/mydjangoapp python3 manage.py migrate&lt;/pre&gt; &lt;p&gt;Or, to work interactively inside the container, start a shell:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it -p 8000:8000 -v /opt/src/django-polls:/opt/app-root/src:Z myorg/mydjangoapp /bin/bash&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The shell prompt is set to &lt;code&gt;(app-root)&lt;/code&gt; by the Python base image.&lt;/p&gt; &lt;p&gt;If you wanted to initialize a fresh database:&lt;/p&gt; &lt;pre&gt;(app-root) python3 rm db.sqlite3 (app-root) python3 manage.py migrate (app-root) python3 manage.py createsuperuser&lt;/pre&gt; &lt;p&gt;You can stay in the shell and run the app with:&lt;/p&gt; &lt;pre&gt;(app-root) python3 manage.py runserver 0:8000&lt;/pre&gt; &lt;h3&gt;Ensuring database persistence&lt;/h3&gt; &lt;p&gt;By default, the Django polls app uses an SQLite database in the file &lt;code&gt;db.sqlite3&lt;/code&gt;, which is in the &lt;code&gt;django-polls&lt;/code&gt; directory along with the source code. Because we’ve set up the container to map in a directory from the host, the database will persist between container runs along with our source code.&lt;/p&gt; &lt;p&gt;Because containers are ephemeral, if the database was stored outside of the &lt;code&gt;/opt/app-root/src&lt;/code&gt; directory, it wouldn’t persist between runs of the container. You could fix this issue by applying another volume mount &lt;code&gt;-v&lt;/code&gt; to the &lt;code&gt;podman run&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;Instead of using SQLite, you might want to use a full database server that runs separately from the Django app container.&lt;/p&gt; &lt;h3&gt;Running PostgreSQL 10 in a container&lt;/h3&gt; &lt;p&gt;In this section, we’ll get the Red Hat Enterprise Linux 8 PostgreSQL 10 application stream running in a container managed by &lt;code&gt;systemd&lt;/code&gt; on the host system. Searching the &lt;a href="https://access.redhat.com/containers/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Container Catalog&lt;/a&gt;, we can look for PostgreSQL images. At the time this article was written, there wasn’t a PostgreSQL image based on UBI 8 in the catalog, but there was &lt;a href="https://access.redhat.com/containers/#/registry.access.redhat.com/rhel8/postgresql-10" target="_blank" rel="noopener noreferrer"&gt;one based on RHEL 8&lt;/a&gt;. We’ll pull the image before running to make it easier to inspect:&lt;/p&gt; &lt;pre&gt;$ sudo podman pull registry.redhat.io/rhel8/postgresql-10&lt;/pre&gt; &lt;p&gt;Since containers are designed to be ephemeral, we need to set up permanent storage for the database. We’ll set up a directory on the host’s system and map it into the container. First, inspect the image to find out the user ID we’ll need for the directories. Alternatively, we could also get information about this image from its &lt;a href="https://access.redhat.com/containers/#/registry.access.redhat.com/rhel8/postgresql-10"&gt;Red Hat Container Catalog page&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;$ sudo podman inspect postgresql-10 | grep -A 1 User&lt;/pre&gt; &lt;p&gt;Now that we’ve got the User ID the container will run under, create a directory on the host, give that User ID ownership, and set the context for SELinux:&lt;/p&gt; &lt;pre&gt;$ sudo mkdir -p /opt/dbdata/django-polls-db $ sudo chown 26:26 /opt/dbdata/django-polls-db $ sudo setfacl -m u:26:-wx /opt/dbdata/django-polls-db $ sudo semanage fcontext -a -t container_file_t /opt/dbdata/django-polls-db $ sudo restorecon -v /opt/dbdata/django-polls-db&lt;/pre&gt; &lt;p&gt;Let’s test PostgreSQL by hand:&lt;/p&gt; &lt;pre&gt;$ sudo podman run -it --name django-polls-pgsql -e POSTGRESQL_USER=polls -e POSTGRESQL_PASSWORD=mysecret -e POSTGRESQL_DATABASE=django-polls -p 5432:5432 -v /opt/dbdata/django-polls-db:/var/lib/pgsql/data:Z registry.redhat.io/rhel8/postgresql-10&lt;/pre&gt; &lt;p&gt;You should see output that looks like this:&lt;/p&gt; &lt;pre&gt;Success. You can now start the database server using: pg_ctl -D /var/lib/pgsql/data/userdata -l logfile start waiting for server to start.... 2019-08-18 21:10:08.545 UTC [31] LOG: listening on Unix socket "/tmp/.s.PGSQL.5432" 2019-08-18 21:10:08.554 UTC [31] LOG: redirecting log output to logging collector process 2019-08-18 21:10:08.554 UTC [31] HINT: Future log output will appear in directory "log". done server started /var/run/postgresql:5432 - accepting connections =&amp;#62; sourcing /usr/share/container-scripts/postgresql/start/set_passwords.sh ... ALTER ROLE waiting for server to shut down.... server stopped Starting server... 2019-08-18 21:10:09.136 UTC [1] LOG: listening on IPv4 address "0.0.0.0", port 5432 2019-08-18 21:10:09.136 UTC [1] LOG: listening on IPv6 address "::", port 5432 2019-08-18 21:10:09.139 UTC [1] LOG: listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432" 2019-08-18 21:10:09.142 UTC [1] LOG: listening on Unix socket "/tmp/.s.PGSQL.5432" 2019-08-18 21:10:09.160 UTC [1] LOG: redirecting log output to logging collector process 2019-08-18 21:10:09.160 UTC [1] HINT: Future log output will appear in directory "log".&lt;/pre&gt; &lt;p&gt;PostgreSQL started correctly, so you can CTRL+C. Then clean up by removing the container:&lt;/p&gt; &lt;pre&gt;$ sudo podman rm django-polls-pgsql&lt;/pre&gt; &lt;p&gt;Next, create a &lt;code&gt;systemd&lt;/code&gt; unit file to manage PostgreSQL. As root, use an editor or &lt;code&gt;cat &amp;#62;&lt;/code&gt; to create &lt;code&gt;/etc/systemd/system/django-polls-pgsql.service&lt;/code&gt; with the following contents:&lt;/p&gt; &lt;pre&gt;[Unit] Description=Django Polls PostgreSQL Database After=network.target [Service] Type=simple TimeoutStartSec=5m ExecStartPre=-/usr/bin/podman rm "django-polls-pgsql" ExecStart=/usr/bin/podman run --name django-polls-pgsql -e POSTGRESQL_USER=polls -e POSTGRESQL_PASSWORD=mysecret -e POSTGRESQL_DATABASE=django-polls -p 5432:5432 -v /opt/dbdata/django-polls-db:/var/lib/pgsql/data registry.redhat.io/rhel8/postgresql-10 ExecReload=-/usr/bin/podman stop "django-polls-pgsql" ExecReload=-/usr/bin/podman rm "django-polls-pgsql" ExecStop=-/usr/bin/podman stop "django-polls-pgsql" Restart=always RestartSec=30 [Install] WantedBy=multi-user.target &lt;/pre&gt; &lt;p&gt;Next, tell &lt;code&gt;systemd&lt;/code&gt; to reload, start the PostgreSQL service, and then check the output:&lt;/p&gt; &lt;pre&gt;$ sudo systemctl daemon-reload $ sudo systemctl start django-polls-pgsql $ sudo systemctl status django-polls-pgsql&lt;/pre&gt; &lt;p&gt;You can check the container logs with:&lt;/p&gt; &lt;pre&gt;$ sudo podman logs django-polls-pgsql&lt;/pre&gt; &lt;p&gt;The PostgreSQL port, 5432, is exposed to the host system. So if you have the client installed, you should be able to connect to the database.&lt;/p&gt; &lt;p&gt;There are a couple of things to note about the &lt;code&gt;podman run&lt;/code&gt; command inside the &lt;code&gt;systemd&lt;/code&gt; unit file. Don’t use a &lt;code&gt;-d&lt;/code&gt; option to detach from the running container like you would from the command line. Since &lt;code&gt;systemd&lt;/code&gt; is managing the process, &lt;code&gt;podman run&lt;/code&gt; should not exit until the container dies. If you have a &lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;systemd&lt;/code&gt; will think the container has failed and will restart it.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;--rm&lt;/code&gt; option to &lt;code&gt;podman run&lt;/code&gt; that automatically removed the containers when it exits isn’t used. Instead, &lt;code&gt;systemd&lt;/code&gt; is configured to run a &lt;code&gt;podman rm&lt;/code&gt; command just before starting the container. This gives you the opportunity to check the state of files inside the stopped container after it exits.&lt;/p&gt; &lt;h3&gt;Configuring Django to use PostgreSQL&lt;/h3&gt; &lt;p&gt;You need to change the settings for the Django site that contains the Polls app to use the PostgreSQL database instead of SQLite. Edit &lt;code&gt;/opt/src/django-polls/mysite/settings.py&lt;/code&gt; and change the &lt;code&gt;DATABASES&lt;/code&gt; section to:&lt;/p&gt; &lt;pre&gt;DATABASES = { 'default': { # 'ENGINE': 'django.db.backends.sqlite3', # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'django-polls', 'USER': 'polls', 'PASSWORD': 'mysecret', 'HOST': 'localhost', } } &lt;/pre&gt; &lt;h2&gt;Using Buildah to create an image with your Django app&lt;/h2&gt; &lt;p&gt;After you’ve developed your app, you can use Buildah to create a distributable container image with your Django app. We’ll use Buildah command lines instead of a Dockerfile. This method is much more flexible for complex builds and automation. You can use shell scripts or whatever tools you use for your build environment:&lt;/p&gt; &lt;pre&gt;#!/bin/sh # Build our Django app and all the dependencies into a container image # Note: OOTB on RHEL 7.6 this needs to be run as root. MYIMAGE=myorg/mydjangoapp USERID=1000 IMAGEID=$(buildah from ubi8/python-36) buildah run $IMAGEID pip3 install django gunicorn psycopg2 # any build steps above this line run as root # after this build steps run as $USERID buildah config --user $USERID:$USERID $IMAGEID buildah copy $IMAGEID . /opt/app-root/src # Any other prep steps go here. you could apply migrations, etc. buildah config --cmd 'python3 manage.py runserver 0:8000' $IMAGEID buildah commit $IMAGEID $MYIMAGE &lt;/pre&gt; &lt;p&gt;Now, make &lt;code&gt;app-image-buils.sh&lt;/code&gt; executable, then build the image:&lt;/p&gt; &lt;pre&gt;$ chmod +x app-image-build.sh $ sudo ./app-image-build.sh&lt;/pre&gt; &lt;p&gt;Now you can run and test the new image:&lt;/p&gt; &lt;pre&gt;$ sudo podman run --rm -it --net host myorg/mydjangoapp&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;run&lt;/code&gt; command no longer needs the volume mount, because the code is now inside the container, and the data is managed by the PostgreSQL container’s volume.&lt;/p&gt; &lt;p&gt;When you are ready, you can distribute your application to others by pushing it to a container registry like Red Hat’s &lt;a href="https://quay.io/" target="_blank" rel="noopener noreferrer"&gt;Quay.io&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Managing your Django app with systemd&lt;/h2&gt; &lt;p&gt;You can manage your new Django app with &lt;code&gt;systemd&lt;/code&gt; so it will start on system boot. As root, create the &lt;code&gt;systemd&lt;/code&gt; unit file &lt;code&gt;/etc/systemd/system/django-polls-app.service&lt;/code&gt; with the following contents:&lt;/p&gt; &lt;pre&gt;[Unit] Description=Django Polls App After=django-polls-pgsql.service [Service] Type=simple TimeoutStartSec=30s ExecStartPre=-/usr/bin/podman rm "mydjangoapp" ExecStart=/usr/bin/podman run --name mydjangoapp --net host myorg/mydjangoapp ExecReload=-/usr/bin/podman stop "myorg/mydjangoapp" ExecReload=-/usr/bin/podman rm "myorg/mydjangoapp" ExecStop=-/usr/bin/podman stop "myorg/mydjangoapp" Restart=always RestartSec=30 [Install] WantedBy=multi-user.target&lt;/pre&gt; &lt;p&gt;Tell &lt;code&gt;systemd&lt;/code&gt; to reload, then start the app.&lt;/p&gt; &lt;pre&gt;$ sudo systemctl daemon-reload $ sudo systemctl start django-polls-app&lt;/pre&gt; &lt;h2&gt;Next steps&lt;/h2&gt; &lt;p&gt;By now, you should see that it is pretty easy to get the software components you need running in containers so you can focus on development. It shouldn’t feel too different from developing without containers. Hopefully, you can see how to build on these instructions for your own apps.&lt;/p&gt; &lt;p&gt;You should check out what other UBI 8 images are available for you to use in the Red Hat Container Catalog. If the language, runtime, or server isn&amp;#8217;t available as a UBI image, you can build your own using the UBI 8 base image. Then, you can add the application streams and other RPMs you need with &lt;code&gt;yum&lt;/code&gt; commands in a Dockerfile, or with &lt;code&gt;buildah run&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The setup in this article has a number of drawbacks as it was intended to be a quick and easy to digest demo. There are many ways one could improve the setup. For example, the Django container with the packaged app is configured to share the host’s network with &lt;code&gt;--net host&lt;/code&gt;, which made it simple for the Django process to connect to the database via localhost. While this setup is quick and easy for development, you don’t get the network isolation that containers offer.&lt;/p&gt; &lt;p&gt;One of the ways the network configuration could be improved is to use Podman’s pod capabilities to put the web and database containers in the same pod where they share namespaces. See Brent Baude’s article &lt;a href="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/"&gt;Podman: Managing pods and containers in a local container runtime&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;More information&lt;/h2&gt; &lt;p&gt;Related articles:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/"&gt;Run Red Hat Enterprise Linux 8 in a container on RHEL 7&lt;/a&gt; (Covers PHP 7.2, MariaDB, and WordPress running in containers.)&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.redhat.com/en/blog/setting-django-application-rhel-8-beta" target="_blank" rel="noopener noreferrer"&gt;Setting up a Django application on RHEL 8 Beta&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Cheat sheets:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/04/25/podman-basics-cheat-sheet/"&gt;&lt;span style="font-weight: 400;"&gt;Podman Basics Cheat Sheet&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-developer-cheat-sheet/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Enterprise Linux 8 Cheat Sheet&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Podman and Buildah:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/"&gt;&lt;span style="font-weight: 400;"&gt;Podman and Buildah for Docker Users&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/29/managing-containerized-system-services-with-podman/"&gt;&lt;span style="font-weight: 400;"&gt;Managing containerized system services with podman&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/"&gt;&lt;span style="font-weight: 400;"&gt;Podman: Managing pods and containers in a local container runtime&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://opensource.com/article/18/6/getting-started-buildah" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Getting Started with Buildah&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Building, Running, and Managing Containers &amp;#8211; RHEL 8 Documentation&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html-single/getting_started_with_containers/index" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Getting Started with Containers &amp;#8211; RHEL 7 Documentation&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;UBI: &lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhel/ubi/"&gt;&lt;span style="font-weight: 400;"&gt;The UBI page on Red Hat Developers&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;&lt;span style="font-weight: 400;"&gt;UBI FAQ&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#38;linkname=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fdevelop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux%2F&amp;#038;title=Develop%20with%20Django%202%20and%20Python%203%20in%20a%20container%20with%20Red%20Hat%20Enterprise%20Linux" data-a2a-url="https://developers.redhat.com/blog/2019/09/11/develop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux/" data-a2a-title="Develop with Django 2 and Python 3 in a container with Red Hat Enterprise Linux"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/11/develop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux/"&gt;Develop with Django 2 and Python 3 in a container with Red Hat Enterprise Linux&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/J9RzkIJAMoQ" height="1" width="1" alt=""/&gt;</content><summary>In my previous article, Run Red Hat Enterprise Linux 8 in a container on RHEL 7, I showed how to start developing with the latest versions of languages, databases, and web servers available with Red Hat Enterprise Linux 8 even if you are still running RHEL 7. In this article, I’ll build on that base to show how to get started with Django 2 using the current RHEL 8 application stream versions of Py...</summary><dc:creator>Rob Terzi</dc:creator><dc:date>2019-09-11T07:01:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/11/develop-with-django-2-and-python-3-in-a-container-with-red-hat-enterprise-linux/</feedburner:origLink></entry><entry><title>How to debug where a function returns using LLDB from the command line</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/G3PjIDUpY2A/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="c/c++" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="Debuggers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="lldb" scheme="searchisko:content:tags" /><category term="llvm toolset" scheme="searchisko:content:tags" /><author><name>Konrad Kleine</name></author><id>searchisko:content:id:jbossorg_blog-how_to_debug_where_a_function_returns_using_lldb_from_the_command_line</id><updated>2019-09-11T07:00:55Z</updated><published>2019-09-11T07:00:55Z</published><content type="html">&lt;p&gt;I often find myself in a situation when I want to know where a function returns. There&amp;#8217;s no need to know the return value, as this may be the same for multiple code paths (e.g., &lt;code&gt;nullptr&lt;/code&gt; if something went wrong). It is embarrassing, but I sometimes have put &lt;code&gt;fprintf(stderr, "T1");&lt;/code&gt; in my code just to follow which path the execution took. Needless to say, this behavior requires manual editing and recompilation and should be avoided if possible.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a way to elegantly debug where a function returns using &lt;code&gt;&lt;a href="https://lldb.llvm.org/"&gt;lldb&lt;/a&gt;&lt;/code&gt; from the command line.&lt;/p&gt; &lt;p&gt;&lt;span id="more-624907"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Consider this &lt;code&gt;test.cpp&lt;/code&gt; program and all you want to do is find out where the function &lt;code&gt;foo&lt;/code&gt; returns:&lt;/p&gt; &lt;pre&gt;int foo(int argc) { switch (argc) { case 1: return 1; case 2: return 2; case 3: return 3; } return -1; } int main(int argc, char *argv[]) { return foo(argc); } &lt;/pre&gt; &lt;p&gt;Note that there are five &lt;code&gt;return&lt;/code&gt; statements in this code, but we only want to know which of the four inside of &lt;code&gt;foo&lt;/code&gt; are being hit.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s start by compiling the above program with debug symbols:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;clang -g test.cpp&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To get to know where &lt;code&gt;foo&lt;/code&gt; returns, you can run the following command.&lt;/p&gt; &lt;pre&gt;lldb -b -o "br set -X foo -p return" -o r ./a.out -- hello world&lt;/pre&gt; &lt;ol&gt; &lt;li&gt;The &lt;code&gt;-b&lt;/code&gt; toggles on batch mode. I find this handy because it lets you execute your program in a fire-and-forget fashion without leaving you in the debugger when your program is done.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;-o "br set -X foo -p return"&lt;/code&gt; sets a breakpoint on the pattern return inside the function &lt;code&gt;foo&lt;/code&gt;. Note that a breakpoint is limited only to the return statements inside the function &lt;code&gt;foo&lt;/code&gt; (we have four, not five locations).&lt;/li&gt; &lt;li&gt;The &lt;code&gt;-o r&lt;/code&gt; runs the program and stops at the breakpoint inside &lt;code&gt;foo&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Everything after the &lt;code&gt;--&lt;/code&gt; is passed to our program &lt;code&gt;./a,out&lt;/code&gt; as arguments.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Here you see the effect:&lt;/p&gt; &lt;pre&gt;(lldb) target create "./a.out" Current executable set to './a.out' (x86_64). (lldb) settings set -- target.run-args "hello" "world" (lldb) br set -X foo -p return Breakpoint 1: 4 locations. (lldb) r Process 7542 stopped * thread #1, name = 'a.out', stop reason = breakpoint 1.3 frame #0: 0x0000000000401170 a.out`foo(argc=3) at test.cpp:8:5 5 case 2: 6 return 2; 7 case 3: -&amp;#62; 8 return 3; 9 } 10 return -1; 11 } Process 7542 launched: '/home/kkleine/a.out' (x86_64) &lt;/pre&gt; &lt;p&gt;I hope you like this tip. For more useful LLDB tips on breakpoints, please visit this page: &lt;a href="https://lldb.llvm.org/use/tutorial.html#setting-breakpoints"&gt;https://lldb.llvm.org/use/tutorial.html#setting-breakpoints&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#38;linkname=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#38;linkname=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#38;linkname=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#38;linkname=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#38;linkname=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#38;linkname=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#38;linkname=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F11%2Fhow-to-debug-where-a-function-returns-using-lldb-from-the-command-line%2F&amp;#038;title=How%20to%20debug%20where%20a%20function%20returns%20using%20LLDB%20from%20the%20command%20line" data-a2a-url="https://developers.redhat.com/blog/2019/09/11/how-to-debug-where-a-function-returns-using-lldb-from-the-command-line/" data-a2a-title="How to debug where a function returns using LLDB from the command line"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/11/how-to-debug-where-a-function-returns-using-lldb-from-the-command-line/"&gt;How to debug where a function returns using LLDB from the command line&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/G3PjIDUpY2A" height="1" width="1" alt=""/&gt;</content><summary>I often find myself in a situation when I want to know where a function returns. There’s no need to know the return value, as this may be the same for multiple code paths (e.g., nullptr if something went wrong). It is embarrassing, but I sometimes have put fprintf(stderr, "T1"); in my code just to follow which path the execution took. Needless to say, this behavior requires manual editing and reco...</summary><dc:creator>Konrad Kleine</dc:creator><dc:date>2019-09-11T07:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/11/how-to-debug-where-a-function-returns-using-lldb-from-the-command-line/</feedburner:origLink></entry><entry><title>Understanding Red Hat OpenShift’s Application Monitoring Operator</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/52wy9WBUq8M/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="grafana" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="prometheus" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Jose Silva</name></author><id>searchisko:content:id:jbossorg_blog-understanding_red_hat_openshift_s_application_monitoring_operator</id><updated>2019-09-10T07:00:45Z</updated><published>2019-09-10T07:00:45Z</published><content type="html">&lt;p&gt;Monitoring systems are usually composed of three layers: a database layer that hosts metrics data, a layer to display the stored metric data graphically in dashboards, and an alerting layer to send out notifications via methods such as email, on-call notification systems, and chat platforms. This article presents an overview of the components used in &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;&amp;#8216;s Application Monitoring Operator, how to install them using the Operator, and an example of the Operator in action.&lt;span id="more-622587"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Application monitoring stack components&lt;/h2&gt; &lt;p&gt;The OpenShift &lt;a href="https://github.com/integr8ly/application-monitoring-operator" target="_blank" rel="noopener noreferrer"&gt;Application Monitoring Operator&lt;/a&gt; used in Red Hat Integration products aims to cover all of those layers by installing a set of tools to build a monitoring system on the cluster. This monitoring stack consists of three famous open source community components that are installed by deploying the Grafana and Prometheus Operators: &lt;a href="https://grafana.com" target="_blank" rel="noopener noreferrer"&gt;Grafana&lt;/a&gt;, &lt;a href="https://prometheus.io" target="_blank" rel="noopener noreferrer"&gt;Prometheus&lt;/a&gt;, and &lt;a href="https://prometheus.io/docs/alerting/alertmanager/" target="_blank" rel="noopener noreferrer"&gt;Alertmanager&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="prometheus"&gt;Prometheus&lt;/h3&gt; &lt;p&gt;Prometheus is an open source project designed to monitor and provide alerts in a microservices infrastructure. Prometheus supports scraping application instances to collect metrics and generate graphs. These metrics are exposed by services through HTTP(S), and Prometheus periodically scraps target-defined endpoints and writes the collected samples into its database.&lt;/p&gt; &lt;p&gt;This tool comes with a functional query language called &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" rel="noopener noreferrer"&gt;PromQL&lt;/a&gt; that lets users select and aggregate time series data in real time. The outcome of a query can be exposed as a graph or tabula data, or consumed via the HTTP API.&lt;/p&gt; &lt;p&gt;The Application Monitoring Operator uses the &lt;a href="https://coreos.com/blog/the-prometheus-operator.html" target="_blank" rel="noopener noreferrer"&gt;Prometheus Operator&lt;/a&gt; to install instances of Prometheus in a simple, declarative way to create, configure, and manage Prometheus instances on the cluster.&lt;/p&gt; &lt;h3 id="alertmanager"&gt;Alertmanager&lt;/h3&gt; &lt;p&gt;Here is where the alerts sent from Prometheus servers are handled. Alertmanager is responsible for receiving alerts and sending them out to notify the end user. An alerting system is useful to warn about a new problem, allowing teams to take action to prevent major issues or system downtime.&lt;/p&gt; &lt;p&gt;When alerts are sent to Alertmanager, they can be filtered and grouped according to their severity, and then the system decides which action to take—that can either be to go silent or to notify a receiver (email, chat app, calls, etc.).&lt;/p&gt; &lt;h3 id="grafana"&gt;Grafana&lt;/h3&gt; &lt;p&gt;When it comes to monitoring systems, the visualization layer helps teams detect and take action when anomalous behavior occurs. In the Application Monitoring Operator, we use Grafana as the visualization tool to display time series data collected from Prometheus in the dashboard format.&lt;/p&gt; &lt;p&gt;Grafana is installed using the Grafana Operator Custom Resource (CR), which can deploy and manage Grafana instances in the cluster.&lt;/p&gt; &lt;h2 id="installingthemonitoringoperator"&gt;Application Monitoring Operator installation&lt;/h2&gt; &lt;p&gt;After a brief introduction of each component in the application monitoring stack, let’s see how they all work together by installing the Application Monitoring Operator. The first thing we need is Red Hat OpenShift cluster, which can be provided by installing Minishift on your local machine. For more information about installing Minishift, see &lt;a href="https://docs.okd.io/latest/minishift/getting-started/index.html" target="_blank" rel="noopener noreferrer"&gt;Getting Started with Minishift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you have your cluster up and running, you can start deploying the Operator:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Clone the Operator from the git repository: &lt;pre&gt;$ git clone git@github.com:integr8ly/application-monitoring-operator.git&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Log in to OpenShift with the administrator role (it is required to have admin access to the cluster to create CRDs, ClusterRoles, and ClusterRoleBindings): &lt;pre&gt;$ oc login -u system:admin&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Install the Application Monitoring Operator using Make, which will trigger a shell script to create a new namespace on the cluster, create a new label (&lt;code&gt;monitoring-key=middleware&lt;/code&gt;), and install all of the custom resource definitions required by the stack: &lt;pre&gt;$ make cluster/install&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;After running Make, all of the components are installed in a new namespace called &lt;code&gt;application-monitoring&lt;/code&gt;. To make sure the installation went well, you can check by running the following:&lt;/p&gt; &lt;pre&gt;$ oc project Using project "application-monitoring" on server "https://your-cluster-ip:8443" $ oc get pods&lt;/pre&gt; &lt;p&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/oc-get-pods.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;You should be able to access Prometheus, Grafana, and Alertmanager by getting their respective routes:&lt;/p&gt; &lt;pre&gt;$ oc get route&lt;/pre&gt; &lt;p&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/oc-get-routes.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;To access Openshift via the UI you may need to grant admin permission to users. To do so, run the command below:&lt;/p&gt; &lt;pre&gt;$ oc adm policy add-cluster-role-to-user admin "user_name"&lt;/pre&gt; &lt;h2 id="monitoringoperatorinaction"&gt;Application Monitoring Operator in action&lt;/h2&gt; &lt;p&gt;Now that the Application Monitoring Operator is running, let’s create a project to expose metrics to Prometheus. The first thing we need to do is create a new namespace on the cluster to host the project:&lt;/p&gt; &lt;pre&gt;$ oc new-project example-prometheus-nodejs&lt;/pre&gt; &lt;p&gt;The Application Monitoring Operator uses the &lt;a href="http://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; labeling system to discover imported custom resources (Prometheus rules, service monitors, Grafana dashboards, etc.):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;Prometheus rules&lt;/em&gt; define a set of alert rules in Prometheus.&lt;/li&gt; &lt;li&gt;&lt;em&gt;Service monitors&lt;/em&gt; define how groups of services should be monitored, and the operator automatically configures Prometheus to scrap services according to the definition.&lt;/li&gt; &lt;li&gt;&lt;em&gt;Grafana dashboard&lt;/em&gt; defines dashboards to be reconciled in Grafana.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The label value can be changed on the Application Monitoring CR by changing the property &lt;code&gt;labelSelector&lt;/code&gt;. To create a new label called &lt;code&gt;middleware&lt;/code&gt; for our new namespace on the cluster, run:&lt;/p&gt; &lt;pre&gt;$ oc label namespace example-prometheus-nodejs monitoring-key=middleware&lt;/pre&gt; &lt;p&gt;In the project we cloned&amp;#8217;s repository is a &lt;a href="https://github.com/david-martin/example-prometheus-nodejs/blob/d647b83116519b650e00401f04c8868280c47778/template.yaml" target="_blank" rel="noopener noreferrer"&gt;template file&lt;/a&gt; that we use to deploy the application, import the CRs (Prometheus rules, service monitors, Grafana dashboards, etc.) that the application monitoring stack detects, and reconcile them.&lt;/p&gt; &lt;p&gt;To deploy the application use the following command:&lt;/p&gt; &lt;pre&gt;$ oc process -f https://raw.githubusercontent.com/david-martin/example-prometheus-nodejs/master/template.yaml | oc create -f -&lt;/pre&gt; &lt;p&gt;An important thing to notice is that the Custom Resource Definition (CRD) the Grafana dashboard imported does not have the &lt;code&gt;monitoring-key=middleware&lt;/code&gt; label required for Grafana to detect and reconcile new dashboards. To add the label, run the following command:&lt;/p&gt; &lt;pre&gt;$ oc label grafanadashboard monitoring-key=middleware --all&lt;/pre&gt; &lt;p&gt;After this action, we should see a new Grafana UI dashboard showing app memory usage (among other things). You should also see a new Prometheus target in &lt;code&gt;example-prometheus-nodejs/example-prometheus-nodejs&lt;/code&gt;, and the new alert role &lt;code&gt;APIHighMedianResponseTime&lt;/code&gt;.&lt;/p&gt; &lt;h3 id="additionalresources"&gt;Additional resources&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/david-martin/example-prometheus-nodejs/" target="_blank" rel="noopener noreferrer"&gt;Example application for Prometheus monitoring&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/prometheus/prometheus" target="_blank" rel="noopener noreferrer"&gt;Prometheus repository&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener noreferrer"&gt;Prometheus documentation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://grafana.com/docs/" target="_blank" rel="noopener noreferrer"&gt;Grafana documentation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_integration/2019-07/html-single/monitoring_red_hat_integration/index" target="_blank" rel="noopener noreferrer"&gt;Monitoring Red Hat integration&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#38;linkname=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#38;linkname=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#38;linkname=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#38;linkname=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#38;linkname=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#38;linkname=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#38;linkname=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F10%2Funderstanding-red-hat-openshifts-application-monitoring-operator%2F&amp;#038;title=Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20Application%20Monitoring%20Operator" data-a2a-url="https://developers.redhat.com/blog/2019/09/10/understanding-red-hat-openshifts-application-monitoring-operator/" data-a2a-title="Understanding Red Hat OpenShift’s Application Monitoring Operator"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/10/understanding-red-hat-openshifts-application-monitoring-operator/"&gt;Understanding Red Hat OpenShift&amp;#8217;s Application Monitoring Operator&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/52wy9WBUq8M" height="1" width="1" alt=""/&gt;</content><summary>Monitoring systems are usually composed of three layers: a database layer that hosts metrics data, a layer to display the stored metric data graphically in dashboards, and an alerting layer to send out notifications via methods such as email, on-call notification systems, and chat platforms. This article presents an overview of the components used in Red Hat OpenShift‘s Application Monitoring Oper...</summary><dc:creator>Jose Silva</dc:creator><dc:date>2019-09-10T07:00:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/10/understanding-red-hat-openshifts-application-monitoring-operator/</feedburner:origLink></entry><entry><title>5 Questions Everyone's Asking About Microservices (Question 5)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MJaWYMdY3YE/5-questions-everyones-asking-about-microservices-question5.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-5_questions_everyone_s_asking_about_microservices_question_5</id><updated>2019-09-10T05:00:03Z</updated><published>2019-09-10T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://1.bp.blogspot.com/-i6x1EOlxWyE/XVQFqTEqWhI/AAAAAAAAvLk/4p4gtw-bjm4BQAwWePd4zeAQ0Vbg3984ACLcBGAs/s1600/questions.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="666" data-original-width="1000" height="213" src="https://1.bp.blogspot.com/-i6x1EOlxWyE/XVQFqTEqWhI/AAAAAAAAvLk/4p4gtw-bjm4BQAwWePd4zeAQ0Vbg3984ACLcBGAs/s320/questions.jpg" width="320" /&gt;&lt;/a&gt;When discussing the development impact on existing applications while transitioning to microservices, there are five questions that keep popping up in one form or another. They are the same regardless of the size of the organization and seem to become part of strategy discussions later in the process as organizations move towards microservice architectures. &lt;br /&gt;&lt;br /&gt;These articles cover questions that everyone should ask about microservices. Their based on experiences from interactions with organizations in the process of conquering microservices for existing development and for delivering modern applications.&lt;br /&gt;&lt;br /&gt;Previously we covered four questions; &lt;a href="http://www.schabell.org/2019/08/5-questions-everyones-asking-about-microservices-question1.html" target="_blank"&gt;the performance impact of microservices&lt;/a&gt;,&amp;nbsp; a question on &lt;a href="http://www.schabell.org/2019/08/5-questions-everyones-asking-about-microservices-question2.html" target="_blank"&gt;state and monoliths&lt;/a&gt;, one about &lt;a href="https://www.schabell.org/2019/08/5-questions-everyones-asking-about-microservices-question3.html" target="_blank"&gt;data and microservices&lt;/a&gt;, and on &lt;a href="http://www.schabell.org/2019/09/5-questions-everyones-asking-about-microservices-question4.html" target="_blank"&gt;testing microservices&lt;/a&gt;.&amp;nbsp; In this fifth and final article we look at the confusion around using API management or service mesh.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;API management or service mesh&lt;/h3&gt;&amp;nbsp;In this last and final part of the series, we encounter a question that centers around confusion as to what the roles are an API gateway and a service mesh. It goes something like this:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;"How would&amp;nbsp; an API gateway such as 3Scale or service mesh be used to migrate applications to a more modern way of working?"&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;First off, let's clarify that this question references Red Hat 3Scale API Management product which is an API management technology offering based on open source community projects. It's focus is very different that a service mesh technology such as &lt;a href="https://istio.io/" target="_blank"&gt;Istio&lt;/a&gt;, one of the community offerings.&lt;br /&gt;&lt;br /&gt;Now to position how API management's used, remember that we previously talked about microservice development teams functioning independently much like a business-to-business partner. These development teams have an API that's the front to their particular microservice. Using API management tooling, the development team's publishing their microservice API into their organizations managed API layer for consumption.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;Looking at service mesh technology, it's concerned with microservices being able to communicate with each other in their deployment layers. Think of things like microservice discovery, load balancing, failure recovery, metrics, and monitoring. A service mesh solves the intra-microservice challenges that distributed services encounter and does it in a novel way.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Microservices in your future?&lt;/h3&gt;Now that you’ve seen the five questions that many are asking out there in the wild, did you notice some of the same questions you’ve been wrestling with? Since they’re based on interactions with organizations in the process of modernizing their service layers, these questions are both actual and relevant as you're transitioning towards modern architectures for delivering applications.&lt;br /&gt;&lt;br /&gt;Don't hesitate to &lt;a href="http://www.schabell.org/2019/08/5-questions-everyones-asking-about-microservices-question1.html" target="_blank"&gt;head back to the first article in this series&lt;/a&gt; and review all the questions covered in this series. These insights should help you make good decisions, tackle the complexity of your existing monolithic applications, and move towards a fundamentally sound microservices architecture for years to come. &lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: small;"&gt;&lt;i&gt;(article co-authored with &lt;a href="https://twitter.com/burrsutter" target="_blank"&gt;Burr Sutter)&amp;nbsp;&lt;/a&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-74NEsGALUU:pP_YsdKE-b4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-74NEsGALUU:pP_YsdKE-b4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-74NEsGALUU:pP_YsdKE-b4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-74NEsGALUU:pP_YsdKE-b4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-74NEsGALUU:pP_YsdKE-b4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-74NEsGALUU:pP_YsdKE-b4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-74NEsGALUU:pP_YsdKE-b4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-74NEsGALUU:pP_YsdKE-b4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-74NEsGALUU:pP_YsdKE-b4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-74NEsGALUU:pP_YsdKE-b4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-74NEsGALUU:pP_YsdKE-b4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/-74NEsGALUU" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MJaWYMdY3YE" height="1" width="1" alt=""/&gt;</content><summary>When discussing the development impact on existing applications while transitioning to microservices, there are five questions that keep popping up in one form or another. They are the same regardless of the size of the organization and seem to become part of strategy discussions later in the process as organizations move towards microservice architectures. These articles cover questions that ever...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-09-10T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/-74NEsGALUU/5-questions-everyones-asking-about-microservices-question5.html</feedburner:origLink></entry><entry><title>Install Red Hat 3scale and configure tenants with 7 simple commands</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vjp2dXsZ4yU/" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Red Hat 3scale API Management" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat SSO" scheme="searchisko:content:tags" /><author><name>Henrique Viecili</name></author><id>searchisko:content:id:jbossorg_blog-install_red_hat_3scale_and_configure_tenants_with_7_simple_commands</id><updated>2019-09-09T07:00:27Z</updated><published>2019-09-09T07:00:27Z</published><content type="html">&lt;p&gt;A couple weeks ago I was faced with the challenge of installing &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.6/"&gt;Red Hat 3scale&lt;/a&gt; and configuring its tenants using solely the command line — no GUI allowed. This is a rather interesting use case, so I decided to write this article and show how to do it with just seven commands!&lt;/p&gt; &lt;p&gt;(By the way, I also decided to include &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html/red_hat_single_sign-on_for_openshift/index"&gt;Red Hat Single Sign-On&lt;/a&gt; (SSO) in the mix because I want my APIs to use &lt;a href="https://openid.net/connect/"&gt;OpenID Connect&lt;/a&gt; (OIDC) for authentication. But I&amp;#8217;ll leave those commands to a future article.)&lt;span id="more-622237"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Requirements&lt;/h2&gt; &lt;p&gt;With the challenge at hand, I knew that if I were to succeed I would have to make good use of the 3scale Master API and some ingenuity. But before jumping into the solution, here are the basic requirements that need to be in place:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Access via the &lt;code&gt;oc&lt;/code&gt; CLI to an OpenShift cluster with rights to create projects (or have at least two projects created for you, one for the management and one for each tenant).&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/3scale/3scale-amp-openshift-templates"&gt;3scale OpenShift Templates&lt;/a&gt; to install 3scale components (&lt;code&gt;amp.yml&lt;/code&gt; and &lt;code&gt;apicast.yml&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Images and ImageStreams for 3scale.&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Disclaimer: I am using Red Hat OpenShift 3.11 with 3scale v2.5. Newer versions of 3scale (2.6+) on OpenShift 4.x introduce the option of using the &lt;a href="https://github.com/3scale/3scale-operator"&gt;3scale Operator&lt;/a&gt; for installation, which is quite different from what is described here.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;h2&gt;Commands&lt;/h2&gt; &lt;p&gt;So, here we go. Let&amp;#8217;s install 3scale and the tenant!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the next sections, whenever you see &lt;code&gt;${A_PLACEHOLDER_NAME}&lt;/code&gt;, it means something that needs to be replaced by a value, either self-explanatory or defined in a previous step.&lt;/p&gt; &lt;h3&gt;Command #0: Ensure you&amp;#8217;ve got the basics&lt;/h3&gt; &lt;pre&gt;# the templates git clone https://github.com/3scale/3scale-amp-openshift-templates # the access with CLI oc login ${YOUR_OCP_MASTER_CONSOLE_URL} # the projects created oc new-project 3scale-management-project oc new-project 3scale-tenant-project&lt;/pre&gt; &lt;h3&gt;Command #1: Install 3scale (management)&lt;/h3&gt; &lt;p&gt;The command below is a minimal command to install 3scale. Many other configuration parameters are available, and I highly recommend reading the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.5/html/installing_3scale/onpremises-installation#deploying_3scale_on_openshift_using_a_template"&gt;installation guide&lt;/a&gt;. For the purposes of this use case, it is sufficient.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;MASTER_NAME (=3scale-master)&lt;/code&gt; parameter is used as a prefix to create the URL of the 3scale Master API. In this case, the final URL should look like &lt;code&gt;3scale-master.apps.ocp.example.com&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;oc new-app --file amp.yml \ -p WILDCARD_DOMAIN=apps.ocp.example.com \ -p MASTER_NAME=3scale-master \ -n 3scale-management-project&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; The output of the command above will contain some generated tokens and secrets; take note of them. The remaining commands will use the &lt;code&gt;MASTER_ACCESS_TOKEN&lt;/code&gt; but you may need the other values in the future.&lt;/p&gt; &lt;p&gt;Once the installation triggered by the previous command completes, you can start creating the tenant with the next commands.&lt;/p&gt; &lt;h3&gt;Command #2: Create the tenant via the Master API&lt;/h3&gt; &lt;p&gt;The parameters below will use the variable &lt;code&gt;TENANT_NAME&lt;/code&gt; to represent the name of the tenant and other parameters will be derived from it. You should replace/define it with the name you want for the tenant, for example, &lt;em&gt;devblog&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;curl -X POST \ https://3scale-master.apps.ocp.example.com/master/api/providers.xml \ -d "access_token=${MASTER_ACCESS_TOKEN}" \ -d "org_name=${TENANT_NAME}-tenant" \ -d "username=${TENANT_NAME}-tenant-admin" \ --data-urlencode "email=${TENANT_NAME}@example.com" \ -d "password=${A_PASSWORD}"&lt;/pre&gt; &lt;p&gt;The Master API should return a successful response containing the XML representation of the new tenant configuration. Look for the following data within the payload:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;TENANT_ACCESS_TOKEN&lt;/code&gt; from the value of the element &lt;code&gt;/signup/access_token/value&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;TENANT_ACCOUNT_ID&lt;/code&gt; from the value of the element &lt;code&gt;/signup/account/id&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;TENANT_USER_ID&lt;/code&gt; from the value of the element &lt;code&gt;/signup/users/user[0]/id&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Command #3: Activate the tenant&lt;/h3&gt; &lt;p&gt;By default, new tenants are not created active. Run the command below to activate it.&lt;/p&gt; &lt;pre&gt;curl -X PUT \ "https://3scale-master.apps.ocp.example.com/admin/api/accounts/${TENANT_ACCOUNT_ID}/users/${TENANT_USER_ID}/activate.xml" \ -d "access_token=${MASTER_ACCESS_TOKEN}"&lt;/pre&gt; &lt;h3&gt;Command #4: Create the tenant&amp;#8217;s Admin Portal route&lt;/h3&gt; &lt;p&gt;This command creates the route to configure the gateway (apicast) so it can communicate to its API Manager.&lt;/p&gt; &lt;pre&gt;oc create route edge ${TENANT_NAME}-admin \ --service=system-provider \ --hostname=${TENANT_NAME}-tenant-admin.apps.ocp.example.com \ --insecure-policy=Allow \ -n 3scale-management-project&lt;/pre&gt; &lt;p&gt;You can access the tenant&amp;#8217;s Admin Portal through this new URL with the credentials (username/password) provided in Command #2.&lt;/p&gt; &lt;h3&gt;Command #5: Create the secret with the AMP management URL&lt;/h3&gt; &lt;pre&gt;oc secret new-basicauth apicast-configuration-url-secret \ --password=https://${TENANT_ACCESS_TOKEN}@${TENANT_NAME}-tenant-admin.apps.ocp.example.com \ -n 3scale-tenant-project&lt;/pre&gt; &lt;h3&gt;Command #6: Install the tenant&amp;#8217;s API gateway (apicast)&lt;/h3&gt; &lt;p&gt;The command below installs only the apicast gateway pods. As this tenant won&amp;#8217;t handle production workloads, it uses the minimal configuration parameters recommended for non-production deployments.&lt;/p&gt; &lt;div&gt; &lt;pre&gt;oc new-app -f apicast.yml \ -p CONFIGURATION_LOADER=lazy \ -p DEPLOYMENT_ENVIRONMENT=staging \ -p CONFIGURATION_CACHE=0 \ -n 3scale-tenant-project&lt;/pre&gt; &lt;/div&gt; &lt;h3&gt;Command #7: Expose your tenant&amp;#8217;s API gateway&lt;/h3&gt; &lt;p&gt;Now you just need to create the route (URL) to expose your apicast service (the gateway) to its clients.&lt;/p&gt; &lt;pre&gt;oc create route edge \ --service=apicast \ --hostname=${TENANT_NAME}-tenant.apps.ocp.example.com \ --insecure-policy=Allow \ -n 3scale-tenant-project&lt;/pre&gt; &lt;p&gt;The APIs you create for this tenant will be exposed through this new URL.&lt;/p&gt; &lt;p&gt;To create more tenants, just repeat commands #2 to #7.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As we move toward automating all the things, it is important to challenge ourselves not to use GUIs and instead do things the harder but more repeatable way. Getting the set of commands is just the first step for automation. Next, we can compile them in the form of a script, or even better, an Ansible playbook. The automation that such capability provides means not only that new tenants can be easily created, but also that the whole environment can be rebuilt from code.&lt;/p&gt; &lt;p&gt;Although these commands show a simple configuration of 3scale, the gist was extracted from a real-life consulting engagement when each tenant represents one of the multiple environments of a software delivery lifecycle — like development, testing, integration, pre-production, and production. Ultimately, this is part of a bigger picture where our customers need to have the full &lt;em&gt;API lifecycle as code&lt;/em&gt; so it can be automated.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#38;linkname=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#38;linkname=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#38;linkname=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#38;linkname=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#38;linkname=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#38;linkname=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#38;linkname=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F09%2Finstall-3scale-multitenant-in-7-commands%2F&amp;#038;title=Install%20Red%20Hat%203scale%20and%20configure%20tenants%20with%207%20simple%20commands" data-a2a-url="https://developers.redhat.com/blog/2019/09/09/install-3scale-multitenant-in-7-commands/" data-a2a-title="Install Red Hat 3scale and configure tenants with 7 simple commands"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/09/install-3scale-multitenant-in-7-commands/"&gt;Install Red Hat 3scale and configure tenants with 7 simple commands&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vjp2dXsZ4yU" height="1" width="1" alt=""/&gt;</content><summary>A couple weeks ago I was faced with the challenge of installing Red Hat 3scale and configuring its tenants using solely the command line — no GUI allowed. This is a rather interesting use case, so I decided to write this article and show how to do it with just seven commands! (By the way, I also decided to include Red Hat Single Sign-On (SSO) in the mix because I want my APIs to use OpenID Connect...</summary><dc:creator>Henrique Viecili</dc:creator><dc:date>2019-09-09T07:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/09/install-3scale-multitenant-in-7-commands/</feedburner:origLink></entry><entry><title>Interacting with native libraries in .NET Core 3.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/k4XFvqN13yE/" /><category term=".NET Core" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><author><name>Tom Deseyn</name></author><id>searchisko:content:id:jbossorg_blog-interacting_with_native_libraries_in_net_core_3_0</id><updated>2019-09-06T13:38:43Z</updated><published>2019-09-06T13:38:43Z</published><content type="html">&lt;p&gt;&lt;code&gt;NativeLibrary&lt;/code&gt; is a new class in .NET Core 3.0 for interacting with native libraries. In this article, we&amp;#8217;ll take a closer look.&lt;/p&gt; &lt;h2&gt;DllImport&lt;/h2&gt; &lt;p&gt;.NET makes it simple to call functions from a native library using &lt;code&gt;DllImport&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;[DllImport("mylibrary")] public static extern int foo(); &lt;/pre&gt; &lt;p&gt;This code makes available the function &lt;code&gt;foo&lt;/code&gt; from the native library &lt;code&gt;mylibrary&lt;/code&gt;. This function accepts no arguments and returns an &lt;code&gt;int&lt;/code&gt;. .NET takes care of marshaling the argument types. It is possible to use managed types (like strings), which will be automagically marshaled.&lt;span id="more-622537"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;When we use this function, .NET Core tries to find &lt;code&gt;mylibrary&lt;/code&gt;. It looks in the application folder and in the system library folders. When looking, it tries variations of the name. For example, on Windows, it adds a &lt;code&gt;.dll&lt;/code&gt; extension; on Linux, it adds an &lt;code&gt;.so&lt;/code&gt; extension. The lookup also takes into account the current platform based on the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog" target="_blank" rel="noopener noreferrer"&gt;Runtime IDentifier&lt;/a&gt; (RID). An application can include libraries for different runtime identifiers (organized in rid-folders), and the most appropriate library will be used.&lt;/p&gt; &lt;p&gt;The main limitation of &lt;code&gt;DllImport&lt;/code&gt; is that the library name and the symbol names are fixed at compile time. In many cases, especially when you&amp;#8217;re building the library yourself and including it with the application, this limitation isn&amp;#8217;t an issue.&lt;/p&gt; &lt;h2&gt;NativeLibrary&lt;/h2&gt; &lt;p&gt;&lt;code&gt;NativeLibrary&lt;/code&gt; is a static class with only a couple of methods:&lt;/p&gt; &lt;pre&gt;void Free(IntPtr handle) IntPtr GetExport(IntPtr handle, String name) IntPtr Load(String libraryPath) IntPtr Load(String libraryName, Assembly, DllImportSearchPath?) void SetDllImportResolver(Assembly, DllImportResolver) IntPtr TryGetExport(IntPtr handle, String name, out IntPtr address) IntPtr TryLoad(String libraryPath, out IntPtr handle) IntPtr TryLoad(String libraryName, Assembly, DllImportSearchPath?, out IntPtr handle) &lt;/pre&gt; &lt;p&gt;The first thing we can do is control the library we use in the &lt;code&gt;DllImport&lt;/code&gt;, by providing a &lt;code&gt;DllImportResolver&lt;/code&gt; delegate for our assembly. The &lt;code&gt;DllImportResolver&lt;/code&gt; has the following signature:&lt;/p&gt; &lt;pre&gt;public delegate IntPtr DllImportResolver(string libraryName, Assembly assembly, DllImportSearchPath? searchPath); &lt;/pre&gt; &lt;p&gt;Its arguments provide us with the context of the &lt;code&gt;DllImport&lt;/code&gt; and as a return value we must provide an &lt;code&gt;IntPtr&lt;/code&gt; for the library. We get this &lt;code&gt;IntPtr&lt;/code&gt; using the &lt;code&gt;Load&lt;/code&gt; methods. The &lt;code&gt;Load(string)&lt;/code&gt; method loads the library at a specific path. The other &lt;code&gt;Load&lt;/code&gt; method provides the default &lt;code&gt;DllImport&lt;/code&gt; loading logic. Let’s see how we can use this information:&lt;/p&gt; &lt;pre&gt;static class Library { const string MyLibrary = "mylibrary"; static Library() { NativeLibrary.SetDllImportResolver(typeof(Library).Assembly, ImportResolver); } private static IntPtr ImportResolver(string libraryName, Assembly assembly, DllImportSearchPath? searchPath) { IntPtr libHandle = IntPtr.Zero; if (libraryName == MyLibrary) { // Try using the system library 'libmylibrary.so.5' NativeLibrary.TryLoad("libmylibrary.so.5", assembly, DllImportSearchPath.System32, out libHandle); } return libHandle; } [DllImport(MyLibrary)] public static extern int foo(); } &lt;/pre&gt; &lt;p&gt;In this example, we register a &lt;code&gt;DllImportResolver&lt;/code&gt; for the assembly. In our resolver, we try loading &lt;code&gt;libmylibrary.so.5&lt;/code&gt; from the system libraries. If it fails, we fall back to the default &lt;code&gt;DllImport&lt;/code&gt; resolution by returning &lt;code&gt;IntPtr.Zero&lt;/code&gt;. This result gives us the usability of &lt;code&gt;DllImport&lt;/code&gt; with the flexibility of picking a specific library at runtime.&lt;/p&gt; &lt;p&gt;Another thing we can do using &lt;code&gt;NativeLibrary&lt;/code&gt; is directly resolve symbols using &lt;code&gt;GetExport&lt;/code&gt;/&lt;code&gt;TryGetExport&lt;/code&gt;. Let&amp;#8217;s look at an example:&lt;/p&gt; &lt;pre&gt;class Library : IDisposable { private readonly IntPtr _libHandle; private readonly Func&amp;#60;int&amp;#62; _foo; private bool _disposed; public Library() { _libHandle = NativeLibrary.Load("mylibrary", typeof(Library).Assembly, DllImportSearchPath.System32); if (NativeLibrary.TryGetExport(_libHandle, "foo", out IntPtr fooHandle)) { _foo = Marshal.GetDelegateForFunctionPointer&amp;#60;Func&amp;#60;int&amp;#62;&amp;#62;(fooHandle); } else { _foo = () =&amp;#62; { throw new NotSupportedException("'foo' not found"); }; } } ~Library() { Dispose(false); } public int foo() { ThrowIfDisposed(); return _foo(); } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; NativeLibrary.Free(_libHandle); } } private void ThrowIfDisposed() { if (_disposed) { ThrowObjectDisposedException(); } } private void ThrowObjectDisposedException() =&amp;#62; throw new ObjectDisposedException(typeof(Library).FullName); } &lt;/pre&gt; &lt;p&gt;Here we&amp;#8217;ve replaced the &lt;code&gt;DllImport&lt;/code&gt; with calls to &lt;code&gt;NativeLibrary.Load&lt;/code&gt;, &lt;code&gt;TryGetExport&lt;/code&gt; and &lt;code&gt;Marshal.GetDelegateForFunctionPointer&lt;/code&gt;. There&amp;#8217;s more code involved, but in return we now have full control over the library we are using and can detect and use its symbols dynamically.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you’ve learned about the new &lt;code&gt;NativeLibrary&lt;/code&gt; class and how you can use it—instead of the &lt;code&gt;DllImport&lt;/code&gt; attribute—when you need more control over the library resolution and the symbols you use.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#038;title=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" data-a2a-url="https://developers.redhat.com/blog/2019/09/06/interacting-with-native-libraries-in-net-core-3-0/" data-a2a-title="Interacting with native libraries in .NET Core 3.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/06/interacting-with-native-libraries-in-net-core-3-0/"&gt;Interacting with native libraries in .NET Core 3.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/k4XFvqN13yE" height="1" width="1" alt=""/&gt;</content><summary>NativeLibrary is a new class in .NET Core 3.0 for interacting with native libraries. In this article, we’ll take a closer look. DllImport .NET makes it simple to call functions from a native library using DllImport: [DllImport("mylibrary")] public static extern int foo(); This code makes available the function foo from the native library mylibrary. This function accepts no arguments and returns a...</summary><dc:creator>Tom Deseyn</dc:creator><dc:date>2019-09-06T13:38:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/06/interacting-with-native-libraries-in-net-core-3-0/</feedburner:origLink></entry><entry><title>New Security Features in WildFly 18</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uxT3c6UaBk4/new-security-features-in-wildfly-18" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_aggregated" scheme="searchisko:content:tags" /><category term="feed_name_fjuma" scheme="searchisko:content:tags" /><category term="new features" scheme="searchisko:content:tags" /><category term="wildfly 18" scheme="searchisko:content:tags" /><author><name>Farah Juma</name></author><id>searchisko:content:id:jbossorg_blog-new_security_features_in_wildfly_18</id><updated>2019-09-06T13:37:44Z</updated><published>2019-09-05T23:08:58Z</published><content type="html">&lt;!-- [DocumentBodyStart:9ceaa560-8018-4646-a361-50d4fcb4c01b] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Since WildFly 18 will be released in a few weeks, just wanted to highlight the new security features that will be included in this release.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Certificate Authority Configuration&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Since WildFly 14, it's possible to obtain and manage certificates from Let&amp;#8217;s Encrypt using the WildFly CLI. WildFly 18 now adds the ability to make use of any certificate authority that implements the &lt;a class="jive-link-external-small" href="https://tools.ietf.org/html/rfc8555" rel="nofollow"&gt;Automatic Certificate Management Environment (ACME) protocol&lt;/a&gt;. More details can be found in this &lt;a class="jive-link-external-small" href="https://dvilkola.wordpress.com/2019/06/11/obtain-and-manage-certificates-from-any-server-instance-that-implements-acme-specification-using-the-wildfly-cli/" rel="nofollow"&gt;blog post&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Simplified SSL Configuration with Let&amp;#8217;s Encrypt&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It is now possible to use the &lt;span style="font-family: 'courier new', courier;"&gt;ssl enable-ssl-management&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;enable-ssl-http-server&lt;/span&gt; commands to easily enable one-way and two-way SSL using certificates obtained automatically from Let&amp;#8217;s Encrypt. Details on how to get started with these commands can be found &lt;a class="jive-link-external-small" href="https://github.com/wildfly/wildfly/blob/master/docs/src/main/asciidoc/_admin-guide/CLI_Recipes.adoc#security-commands" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;SSL Certificate Revocation Checking using OCSP&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Certificate revocation checks can now be performed using the Online Certificate Status Protocol (OCSP) in addition to certificate revocation lists (CRL). Details on how to configure an Elytron trust manager to perform certificate revocation checks can be found &lt;a class="jive-link-external-small" href="https://github.com/wildfly/wildfly/blob/master/docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc#configure-certificate-revocation-in-trust-manager" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Enhanced X509Certificate Identity Mapping&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Prior to WildFly 18, the mapping of an X.509 certificate chain to an identity was done by taking the subject distinguished name from the first certificate in the X.509 certificate chain as an X.500 principal. It is now possible to map an X.509 certificate chain to an identity by using a subject alternative name from the first certificate in the X.509 certificate chain. For a complete overview of this feature, take a look at this &lt;a class="jive-link-blog-small" data-containerId="5158" data-containerType="37" data-objectId="6299" data-objectType="38" href="https://developer.jboss.org/people/fjuma/blog/2019/06/11/mapping-an-x509-cert-to-an-identity-using-a-subject-alt-name"&gt;blog post&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Identity Attribute Aggregation&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Elytron already had a very flexible approach for assigning roles and permissions to an identity based on arbitrary attributes loaded by a security realm. This feature adds support for loading the attributes from multiple security realms and aggregating the results together. Check out this &lt;a class="jive-link-external-small" href="http://darranl.blogspot.com/2019/06/wildfly-elytron-aggregation-of.html" rel="nofollow"&gt;blog post&lt;/a&gt; for more details on this feature.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Aggregate Realm Principal Transformer Configuration&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It is now possible to configure a principal transformer for an aggregate realm that will be used to transform the principal after the authentication identity is obtained but before the authorization identity is obtained. A complete example on how to configure and make use of this principal transformer can be found &lt;a class="jive-link-blog-small" data-containerId="5403" data-containerType="37" data-objectId="6318" data-objectType="38" href="https://developer.jboss.org/people/aabdelsa/blog/2019/09/06/configuring-an-aggregate-realm-with-a-principal-transformer"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Enhanced Audit Logging&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Support for both &lt;a class="jive-link-external-small" href="https://tools.ietf.org/html/rfc5424" rel="nofollow"&gt;RFC 5424&lt;/a&gt; and &lt;a class="jive-link-external-small" href="https://tools.ietf.org/html/rfc3164" rel="nofollow"&gt;RFC 3164&lt;/a&gt; have now been added to Elytron&amp;#8217;s audit logging capabilities as well as the ability to configure how many times Elytron should attempt to send messages to a syslog server when an error is encountered during sending. More details on this feature can be found &lt;a class="jive-link-external-small" href="https://justinwildfly.blogspot.com/2019/08/enhanced-audit-logging-in-wildfly.html" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Masked Password Support&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It is now possible to specify masked passwords when using the Elytron Authentication Client. Check out this &lt;a class="jive-link-blog-small" data-containerId="5403" data-containerType="37" data-objectId="6322" data-objectType="38" href="https://developer.jboss.org/people/aabdelsa/blog/2019/09/05/support-for-masked-passwords-in-the-client-xml-configuration"&gt;blog post&lt;/a&gt; for examples on how to make use of masked passwords.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Where to Find More Information&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;As always, be sure to check out our &lt;a class="jive-link-wiki-small" data-containerId="2303" data-containerType="14" data-objectId="56082" data-objectType="102" href="https://developer.jboss.org/docs/DOC-56082"&gt;blog posts&lt;/a&gt; page, where we collect references to all our blog posts on Elytron features. If there is an Elytron topic you&amp;#8217;d like to see a blog post on, feel free to leave a comment on that page to ask for it. Questions on Elytron are also welcome on WildFly&amp;#8217;s &lt;a class="jivecontainerTT-hover-container jive-link-community-small" data-containerId="1" data-containerType="14" data-objectId="2303" data-objectType="14" href="https://developer.jboss.org/community/wildfly?view=discussions"&gt;user forums&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To learn more about the Elytron subsystem, take a look at the Elytron &lt;a class="jive-link-external-small" href="https://github.com/wildfly/wildfly/blob/master/docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc" rel="nofollow"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:9ceaa560-8018-4646-a361-50d4fcb4c01b] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uxT3c6UaBk4" height="1" width="1" alt=""/&gt;</content><summary>Since WildFly 18 will be released in a few weeks, just wanted to highlight the new security features that will be included in this release.   Certificate Authority Configuration   Since WildFly 14, it's possible to obtain and manage certificates from Let’s Encrypt using the WildFly CLI. WildFly 18 now adds the ability to make use of any certificate authority that implements the Automatic Certifica...</summary><dc:creator>Farah Juma</dc:creator><dc:date>2019-09-05T23:08:58Z</dc:date><feedburner:origLink>https://developer.jboss.org/people/fjuma/blog/2019/09/05/new-security-features-in-wildfly-18</feedburner:origLink></entry><entry><title>Upcoming support for automatic updates of credential stores</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1U2-HX4nE-o/automatic-updates-of-credential-stores" /><category term="automatic updates" scheme="searchisko:content:tags" /><category term="credential store" scheme="searchisko:content:tags" /><category term="feed_group_name_aggregated" scheme="searchisko:content:tags" /><category term="feed_name_fjuma" scheme="searchisko:content:tags" /><category term="wildfly elytron" scheme="searchisko:content:tags" /><author><name>Farah Juma</name></author><id>searchisko:content:id:jbossorg_blog-upcoming_support_for_automatic_updates_of_credential_stores</id><updated>2019-09-05T22:18:35Z</updated><published>2019-09-05T22:18:35Z</published><content type="html">&lt;!-- [DocumentBodyStart:d077c36e-540b-467d-9853-96cdb6ca16e9] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;One of the new security features that we have been working on is adding support for automatic updates of credential stores. Although this feature didn&amp;#8217;t make it into WildFly 18, the plan is to have it included in WildFly 19. This blog post will give an introduction to this new feature.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Credential References&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;A credential store allows for secure storage of credentials. It is possible to populate and manipulate a credential store using the WildFly CLI. Once a credential has been added to a credential store, it is possible to reference the stored credential. In particular, many resources across WildFly&amp;#8217;s management model support a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; attribute that can be used either to specify a &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; password or to cross-reference a credential from a configured credential store. As an example, when configuring a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; in the Elytron subsystem, a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; is used to specify the credential that should be used to access the keystore. This can be configured as follows:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;First, let's configure a &lt;span style="font-family: 'courier new', courier;"&gt;credential-store&lt;/span&gt; (note that the &lt;span style="font-family: 'courier new', courier;"&gt;mycredstore.cs&lt;/span&gt; file doesn&amp;#8217;t need to exist yet):&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:ed5f902e-0c87-48f2-85d4-eae8344428a2][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/credential-store=myCredStore:add(location=mycredstore.cs, relative-to=jboss.server.config.dir, credential-reference={clear-text=StorePassword}, create=true)&lt;/pre&gt;&lt;!--[CodeBlockEnd:ed5f902e-0c87-48f2-85d4-eae8344428a2]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Next, we'll add a credential to our &lt;span style="font-family: 'courier new', courier;"&gt;credential-store&lt;/span&gt;:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:ff6405ac-87f4-4ec2-9fc8-4ad3718326e3][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/credential-store=myCredStore:add-alias(alias=example, secret-value=mySecretPassword)&lt;/pre&gt;&lt;!--[CodeBlockEnd:ff6405ac-87f4-4ec2-9fc8-4ad3718326e3]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Finally, we can configure a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; and reference this newly added credential:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:a8cd1ba1-e1f4-449a-b73c-86906fdb6efb][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=myKS:add(relative-to=jboss.server.config.dir, path=my.keystore, type=JCEKS, credential-reference={store=myCredStore, alias=example})&lt;/pre&gt;&lt;!--[CodeBlockEnd:a8cd1ba1-e1f4-449a-b73c-86906fdb6efb]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Notice that the &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; has two attributes, &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;. The &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; attribute indicates the credential store. The &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; attribute indicates the entry in the credential store that holds our credential.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Automatic Updates&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Instead of needing to first add a credential to a configured credential store in order to reference it from a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt;, WildFly 19 will add the ability to automatically add a credential to a previously defined credential store by specifying both the &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attributes for a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt;. In particular, when configuring a new &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; with both the &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attributes specified, the following will happen:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; attribute is also specified, one of the following will occur:&lt;ul&gt;&lt;li&gt;If the configured credential store does not contain an entry for the given &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;, a new entry will be added to the credential store to hold the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model.&lt;/li&gt;&lt;li&gt;If the credential store does contain an entry for the given &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;, the existing credential will be replaced with the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If the &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; attribute is not specified, an alias will be generated and a new entry will be added to the credential store to hold the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model.&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;As an example, let&amp;#8217;s configure another &lt;span style="font-family: 'courier new', courier;"&gt;credential-store&lt;/span&gt; in the Elytron subsystem:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:872f4a79-a301-4f36-97f0-b2ede388248d][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/credential-store=myNewCredStore:add(location=mynewcredstore.cs, relative-to=jboss.server.config.dir, credential-reference={clear-text=StorePassword}, create=true)&lt;/pre&gt;&lt;!--[CodeBlockEnd:872f4a79-a301-4f36-97f0-b2ede388248d]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now, going back to our keystore example, from WildFly 19, it will be possible to configure a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; with a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; that specifies the &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt;, &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;, and &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attributes as follows:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:f62fcf6c-3d2e-425e-b2b7-b1f2b106c6c9][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=newKS:add(relative-to=jboss.server.config.dir, path=new.keystore, type=JCEKS, credential-reference={store=myNewCredStore, alias=myNewAlias, clear-text=myNewPassword}) { &amp;#160;&amp;#160;&amp;#160; "outcome" =&amp;gt; "success", &amp;#160;&amp;#160;&amp;#160; "result" =&amp;gt; {"credential-store-update" =&amp;gt; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "status" =&amp;gt; "new-entry-added", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "new-alias" =&amp;gt; "myNewAlias" &amp;#160;&amp;#160;&amp;#160; }} }&lt;/pre&gt;&lt;!--[CodeBlockEnd:f62fcf6c-3d2e-425e-b2b7-b1f2b106c6c9]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The above command will result in a new entry being added to our credential store, &lt;span style="font-family: 'courier new', courier;"&gt;myNewCredStore&lt;/span&gt;, with alias &lt;span style="font-family: 'courier new', courier;"&gt;myNewAlias&lt;/span&gt; and credential &lt;span style="font-family: 'courier new', courier;"&gt;myNewPassword&lt;/span&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;When updating an existing &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; attribute that contains both the &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; attributes to also specify the &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute, the existing credential in the configured credential store will be replaced with the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model. As an example, the following command will result in updating the credential for the &lt;span style="font-family: 'courier new', courier;"&gt;myNewAlias&lt;/span&gt; entry that was just added to our credential store:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:64a6c62c-7575-4e1f-82bf-0aff987f054b][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=newKS:write-attribute(name=credential-reference.clear-text,value=myUpdatedPassword) { &amp;#160;&amp;#160;&amp;#160; "outcome" =&amp;gt; "success", &amp;#160;&amp;#160;&amp;#160; "result" =&amp;gt; {"credential-store-update" =&amp;gt; {"status" =&amp;gt; "existing-entry-updated"}}, &amp;#160;&amp;#160;&amp;#160; "response-headers" =&amp;gt; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "operation-requires-reload" =&amp;gt; true, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "process-state" =&amp;gt; "reload-required" &amp;#160;&amp;#160;&amp;#160; } }&lt;/pre&gt;&lt;!--[CodeBlockEnd:64a6c62c-7575-4e1f-82bf-0aff987f054b]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;This blog post has given an introduction to the upcoming support for automatic updates of credential stores.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;For more details on this feature and updates on the status of this feature, keep an eye on &lt;a class="jive-link-external-small" href="https://issues.jboss.org/browse/WFCORE-4150" rel="nofollow"&gt;WFCORE-4150&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:d077c36e-540b-467d-9853-96cdb6ca16e9] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1U2-HX4nE-o" height="1" width="1" alt=""/&gt;</content><summary>One of the new security features that we have been working on is adding support for automatic updates of credential stores. Although this feature didn’t make it into WildFly 18, the plan is to have it included in WildFly 19. This blog post will give an introduction to this new feature.   Credential References   A credential store allows for secure storage of credentials. It is possible to populate...</summary><dc:creator>Farah Juma</dc:creator><dc:date>2019-09-05T22:18:35Z</dc:date><feedburner:origLink>https://developer.jboss.org/people/fjuma/blog/2019/09/05/automatic-updates-of-credential-stores</feedburner:origLink></entry></feed>
